<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>输入URL背后的技术步骤</title>
    <link href="/2022/07/05/%E8%BE%93%E5%85%A5URL%E8%83%8C%E5%90%8E%E7%9A%84%E6%8A%80%E6%9C%AF%E6%AD%A5%E9%AA%A4/"/>
    <url>/2022/07/05/%E8%BE%93%E5%85%A5URL%E8%83%8C%E5%90%8E%E7%9A%84%E6%8A%80%E6%9C%AF%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="系统层"><a href="#系统层" class="headerlink" title="系统层"></a>系统层</h3><h4 id="1-发起http请求，解析域名"><a href="#1-发起http请求，解析域名" class="headerlink" title="1.发起http请求，解析域名"></a>1.发起http请求，解析域名</h4><h4 id="2-DNS"><a href="#2-DNS" class="headerlink" title="2.DNS"></a>2.DNS</h4><ol><li>Chrome搜索自身DNS缓存。chrome输入<code>chrome://net-internals/#dns</code>可查到</li><li>搜索操作系统自身DNS缓存</li><li>读取本地HOST文件</li><li>以上都查询不到时，浏览器发送一个DNS的系统调用，DNS请求到达宽带运营商服务器</li><li>宽带运营商服务器查询自身缓存</li><li>没查询时，发起一个迭代（顶级域–次级域–…）的DNS解析请求，直到获取到域名对应的IP地址</li></ol><h4 id="3-拿到域名对应的IP并缓存"><a href="#3-拿到域名对应的IP并缓存" class="headerlink" title="3.拿到域名对应的IP并缓存"></a>3.拿到域名对应的IP并缓存</h4><ol><li>宽带运营商服务器缓存DNS</li><li>结果返回操作系统并缓存DNS</li><li>结果返回浏览器并缓存DNS</li></ol><h4 id="4-得到目标IP，发起HTTP三次握手，建立起TCP-x2F-IP连接"><a href="#4-得到目标IP，发起HTTP三次握手，建立起TCP-x2F-IP连接" class="headerlink" title="4.得到目标IP，发起HTTP三次握手，建立起TCP&#x2F;IP连接"></a>4.得到目标IP，发起HTTP三次握手，建立起TCP&#x2F;IP连接</h4><ol><li>客户端发送一个带有SYN标志的数据包给服务端</li><li>服务端回传一个带有SYN&#x2F;ACK标志的数据包</li><li>客户端在回传一个带有ACK标志的数据包给服务端</li></ol><h4 id="5-连接成功后，浏览器向服务器发起标准HTTP请求"><a href="#5-连接成功后，浏览器向服务器发起标准HTTP请求" class="headerlink" title="5.连接成功后，浏览器向服务器发起标准HTTP请求"></a>5.连接成功后，浏览器向服务器发起标准HTTP请求</h4><ol><li>构建Http请求报文<ul><li>请求行<ul><li>格式：Method Request-URL HTTP-Version CRLF，如：GET index.html HTTP&#x2F;1.1</li><li>Method可选项：GET、POST、PUT、DELETE、OPTIONS、HEAD</li></ul></li><li>请求报头<ul><li>允许客户端向服务器传递请求的附加信息</li><li>常见请求报头：Accept、Accept-Charset、Accept-Encoding、Connection、Cookie</li></ul></li><li>请求正文<ul><li>当使用POST，PUT等方法时，通常需要客户端向服务器传递数据</li></ul></li></ul></li><li>通过TCP协议，发送到服务端指定端口（Http协议默认80端口、Https协议默认443端口）</li></ol><h4 id="6-服务器收到请求后，经后端处理返回结果"><a href="#6-服务器收到请求后，经后端处理返回结果" class="headerlink" title="6.服务器收到请求后，经后端处理返回结果"></a>6.服务器收到请求后，经后端处理返回结果</h4><ul><li>状态码<ul><li>1xx：指示信息</li><li>2xx：成功</li><li>3xx：重定向</li><li>4xx：客户端错误</li><li>5xx：服务端报错</li></ul></li></ul><h4 id="7-返回Html页面等资源，html包含css-x2F-js等资源，重复以上http请求"><a href="#7-返回Html页面等资源，html包含css-x2F-js等资源，重复以上http请求" class="headerlink" title="7.返回Html页面等资源，html包含css&#x2F;js等资源，重复以上http请求"></a>7.返回Html页面等资源，html包含css&#x2F;js等资源，重复以上http请求</h4><h3 id="渲染层"><a href="#渲染层" class="headerlink" title="渲染层"></a>渲染层</h3><ul><li>首先解析收到的文档，根据文档构建一颗<code>DOM</code>树</li><li>然后解析<code>CSS</code>，生成<code>CSSOM</code>规则树</li><li>根据<code>DOM</code>树和<code>CSSOM</code>规则树构建渲染树，渲染树的节点被称为渲染对象，渲染对象是一个包含颜色和大小等属性的矩形，渲染树和<code>DOM</code>元素相对应</li><li>当渲染对象被创建的时候，浏览器根据渲染树来进行布局，自动重排</li><li>布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的<code>paint</code>方法将内容显示在屏幕上，绘制使用<code>UI</code>基础组建</li></ul><p><img src="https://user-images.githubusercontent.com/6310131/55704761-927a2b00-5a0f-11e9-83c5-28bd475bdcc1.png" alt="dom"></p><p>html内容从上到下解析，浏览器遇到body标签开始显示内容。CSS不会阻塞DOM的解析，JS会阻止DOM解析</p><p>当文档加载过程遇到JS文件，HTML文档会挂起渲染过程，不仅要等到文档中的JS文件加载完毕还要等到解析执行完毕，才会继续HTML渲染过程</p><p>现在浏览器都使用了预加载器，在JS挂起DOM解析时，会继续解析后面的的html，寻找需要下载的资源。预加载下载这些资源，以减少JS阻塞带来的内容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器渲染</title>
    <link href="/2022/06/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    <url>/2022/06/27/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h4 id="浏览器渲染主要步骤"><a href="#浏览器渲染主要步骤" class="headerlink" title="浏览器渲染主要步骤"></a>浏览器渲染主要步骤</h4><ul><li>首先解析收到的文档，根据文档构建一颗<code>DOM</code>树</li><li>然后解析<code>CSS</code>，生成<code>CSSOM</code>规则树</li><li>根据<code>DOM</code>树和<code>CSSOM</code>规则树构建渲染树，渲染树的节点被称为渲染对象，渲染对象是一个包含颜色和大小等属性的矩形，渲染树和<code>DOM</code>元素相对应</li><li>当渲染对象被创建的时候，浏览器根据渲染树来进行布局，自动重排</li><li>布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的<code>paint</code>方法将内容显示在屏幕上，绘制使用<code>UI</code>基础组建</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>进程和线程</title>
    <link href="/2022/06/24/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <url>/2022/06/24/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="浏览器进程"><a href="#浏览器进程" class="headerlink" title="浏览器进程"></a>浏览器进程</h4><ul><li><strong>一个浏览器主线程：</strong>主要负责界面显示、用户交互、子进程管理、同时提供存储等功能</li><li><strong>多个渲染进程：</strong>核心任务是将<code>HTML</code>、<code>CSS</code>和<code>JavaScript</code>转换为用户可以与之交互的网页，排版引擎<code>Blink</code>和<code>JavaScript</code>引擎<code>V8</code>都是运行在该进程中</li><li><strong>一个GPU进程：</strong>绘制<code>UI</code>界面</li><li><strong>一个网络进程：</strong>主要负责页面的网络资源加载</li><li><strong>多个插件进程：</strong>主要负责插件的运行</li></ul><h4 id="浏览器渲染进程的线程"><a href="#浏览器渲染进程的线程" class="headerlink" title="浏览器渲染进程的线程"></a>浏览器渲染进程的线程</h4><ul><li><strong>GUI渲染线程：</strong>负责渲染浏览器页面，解析<code>HTML</code>、<code>CSS</code>，构建<code>DOM</code>树、构建<code>CSSOM</code>树、构建渲染树和绘制页面；当界面需要<strong>重绘</strong>或<strong>回流</strong>时，该线程会触发</li><li><strong>JS引擎线程：</strong>负责处理Javascript代码，解析Javascript代码</li></ul><p>GUI渲染线程和JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存到一个队列中等到JS引擎空闲时才被执行，如果JS执行时间过长，会造成页面渲染阻塞</p><ul><li><strong>事件触发线程：</strong>用来控制事件循环，当JS引擎执行JS代码，会将对应的任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎处理</li><li><strong>定时器触发线程：</strong>用于处理<strong>setInterval</strong>与<strong>setTimeout</strong></li><li><strong>异步http请求线程：</strong><code>XMLHttpRequest</code>连接后会通过浏览器新开一个线程请求，当检测到状态变更时，异步线程就会产生状态变更事件，将回调函数放入事件队列中，等待JS引擎空闲后执行</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>webpack loader和plugin</title>
    <link href="/2022/06/24/webpack-loader%E5%92%8Cplugin/"/>
    <url>/2022/06/24/webpack-loader%E5%92%8Cplugin/</url>
    
    <content type="html"><![CDATA[<h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>loader是一个转换器，将A文件进行编译成B文件，比如：A.less转换为A.css，单纯是文件转换过程</p><h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>plugin是一个扩展器，ta丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，ta并不是直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>懒加载</title>
    <link href="/2022/06/21/%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <url>/2022/06/21/%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h4 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;loading.gif&quot;</span>  <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;pic.png&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;loading.gif&quot;</span>  <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;pic.png&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;loading.gif&quot;</span>  <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;pic.png&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;loading.gif&quot;</span>  <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;pic.png&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;loading.gif&quot;</span>  <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;pic.png&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;loading.gif&quot;</span>  <span class="hljs-attr">data-src</span>=<span class="hljs-string">&quot;pic.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> imgs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;img&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">lozyLoad</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> scrollTop = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> winHeight = <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; imgs.<span class="hljs-property">length</span>; i++)&#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">if</span>(imgs[i].<span class="hljs-property">offsetTop</span> &lt; scrollTop + winHeight)&#123;</span><br><span class="language-javascript">      imgs[i].<span class="hljs-property">src</span> = imgs[i].<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;data-src&#x27;</span>);</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onscroll</span> = <span class="hljs-title function_">lozyLoad</span>();</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CDN</title>
    <link href="/2022/06/21/CDN/"/>
    <url>/2022/06/21/CDN/</url>
    
    <content type="html"><![CDATA[<h4 id="用户使用CDN缓存资源的过程"><a href="#用户使用CDN缓存资源的过程" class="headerlink" title="用户使用CDN缓存资源的过程"></a>用户使用CDN缓存资源的过程</h4><ol><li>DNS系统解析URL，得到一个CDN专用的DNS服务器，DNS系统把域名解析权限交给DNS服务器</li><li>DNS服务器将CDN的全局负载均衡设备ip地址返回给用户</li><li>用户向CDN全局负载均衡设备发起数据请求</li><li>CDN全局负载均衡设备根据用户的ip和请求的内容，选择一台区域的负载均衡设备，并告诉用户向这台设备发起请求</li><li>区域负载均衡设备选择一台合适的缓存服务器，并将该缓存服务器的ip返回给全局负载均衡设备</li><li>全局负载均衡设备把缓存服务器的ip返回给用户</li><li>用户向缓存服务器发送请求，服务器响应请求</li></ol><h4 id="用户未使用CDN缓存资源的过程"><a href="#用户未使用CDN缓存资源的过程" class="headerlink" title="用户未使用CDN缓存资源的过程"></a>用户未使用CDN缓存资源的过程</h4><ol><li>DNS解析域名，得到域名对应的ip地址</li><li>浏览器向得到的ip地址发送请求</li><li>服务器向浏览器返回响应的数据</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>React 性能优化</title>
    <link href="/2022/06/20/React-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2022/06/20/React-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h4 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a><code>shouldComponentUpdate</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span>&#123;<br>  <span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">nextProps</span>)&#123;<br>    <span class="hljs-keyword">return</span> nextProps.<span class="hljs-property">value</span> !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">value</span><br>  &#125;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&quot;My Component &quot; + this.props.value&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a><code>React Hooks</code></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs react">function SomeComp(&#123;prop1, prop2&#125;) &#123;<br>    return(<br>        ..<br>    )<br>&#125;<br><br>React.memo(SomeComp, (props, nextProps)=&gt; &#123;<br>    if(props.prop1 === nextProps.prop1) &#123;<br>        // don&#x27;t re-render/update<br>        return true<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>获取日期</title>
    <link href="/2022/06/19/%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F/"/>
    <url>/2022/06/19/%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="自定义日期格式"><a href="#自定义日期格式" class="headerlink" title="自定义日期格式"></a>自定义日期格式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">formatDate</span>(<span class="hljs-params">date, fmt</span>)&#123;<br>  <span class="hljs-keyword">let</span> ret;<br>  <span class="hljs-keyword">let</span> weekArr = [<span class="hljs-string">&#x27;天&#x27;</span>,<span class="hljs-string">&#x27;一&#x27;</span>,<span class="hljs-string">&#x27;二&#x27;</span>,<span class="hljs-string">&#x27;三&#x27;</span>,<span class="hljs-string">&#x27;四&#x27;</span>,<span class="hljs-string">&#x27;五&#x27;</span>,<span class="hljs-string">&#x27;六&#x27;</span>];<br>  <span class="hljs-keyword">let</span> opt = &#123;<br>    <span class="hljs-string">&quot;y+&quot;</span>: date.<span class="hljs-title function_">getFullYear</span>().<span class="hljs-title function_">toString</span>(),     <span class="hljs-comment">//年</span><br>    <span class="hljs-string">&quot;M+&quot;</span>: (date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span> ).<span class="hljs-title function_">toString</span>(), <span class="hljs-comment">//月</span><br>    <span class="hljs-string">&quot;d+&quot;</span>: date.<span class="hljs-title function_">getDate</span>().<span class="hljs-title function_">toString</span>(),         <span class="hljs-comment">//日</span><br>    <span class="hljs-string">&quot;H+&quot;</span>: date.<span class="hljs-title function_">getHours</span>().<span class="hljs-title function_">toString</span>(),        <span class="hljs-comment">//时</span><br>    <span class="hljs-string">&quot;m+&quot;</span>: date.<span class="hljs-title function_">getMinutes</span>().<span class="hljs-title function_">toString</span>(),      <span class="hljs-comment">//分</span><br>    <span class="hljs-string">&quot;s+&quot;</span>: date.<span class="hljs-title function_">getSeconds</span>().<span class="hljs-title function_">toString</span>(),      <span class="hljs-comment">//秒</span><br>    <span class="hljs-string">&quot;D+&quot;</span>: <span class="hljs-string">&quot;星期&quot;</span> + weekArr[date.<span class="hljs-title function_">getDay</span>()],<br>  &#125;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> opt)&#123;<br>    ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;(&quot;</span>+k+<span class="hljs-string">&quot;)&quot;</span>).<span class="hljs-title function_">exec</span>(fmt);<br>    <span class="hljs-keyword">if</span>(ret)&#123;<br>      fmt = fmt.<span class="hljs-title function_">replace</span>(ret[<span class="hljs-number">1</span>], (ret[<span class="hljs-number">1</span>].<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) ? (opt[k]):(opt[k].<span class="hljs-title function_">padStart</span>(ret[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>,<span class="hljs-string">&quot;0&quot;</span>)))<br>    &#125;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> fmt<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常见HTTP请求头和响应头</title>
    <link href="/2022/06/17/%E5%B8%B8%E8%A7%81HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%92%8C%E5%93%8D%E5%BA%94%E5%A4%B4/"/>
    <url>/2022/06/17/%E5%B8%B8%E8%A7%81HTTP%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%92%8C%E5%93%8D%E5%BA%94%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<h4 id="HTTP-Request-Header常见的请求头"><a href="#HTTP-Request-Header常见的请求头" class="headerlink" title="HTTP Request Header常见的请求头"></a><strong>HTTP Request Header</strong>常见的请求头</h4><ul><li><strong>Accept：</strong>浏览器能够处理的内容类型</li><li><strong>Accept-Charset：</strong>浏览器能够显示的字符集</li><li><strong>Accept-Encoding：</strong>浏览器能够处理的压缩编码</li><li><strong>Accept-Language：</strong>浏览器当前设置的语言</li><li><strong>Connection：</strong>浏览器与服务器之间的连接类型</li><li><strong>Cookie：</strong>当前页面设置的任何Cookie</li><li><strong>Host：</strong>发出请求的页面所在的域</li><li><strong>Referer：</strong>发出请求的页面的URL</li><li><strong>User-Agent：</strong>浏览器的用户代理字符串</li></ul><h4 id="HTTP-Responses-Header常见的响应头"><a href="#HTTP-Responses-Header常见的响应头" class="headerlink" title="HTTP Responses Header常见的响应头"></a><strong>HTTP Responses Header</strong>常见的响应头</h4><ul><li><strong>Date：</strong>表示消息发送的时间，时间的描述格式有rfc822定义</li><li><strong>server：</strong>服务器名称</li><li><strong>Connection：</strong>浏览器与服务器之间的连接类型</li><li><strong>Cache-Control：</strong>控制HTTP缓存</li><li><strong>Content-type：</strong>表示后面文档属于什么MIME类型</li></ul><p>常见的<code>Content-type</code>属性值有一下四种</p><ol><li><strong>application&#x2F;x-www-form-urlencoded：</strong>浏览器的原生<code>form</code>表单，如果不设置<code>enctype</code><sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="属性规定在将表单数据发送到服务器之前如何对其进行编码">[1]</span></a></sup>属性，那么最终就会以<code>application/x-www-form-urlencoded</code>的方式提交数据。该种方式提交的数据放在<code>body</code>里面，数据按照<code>key1=val1&amp;key2=val2</code>的方式进行编码，<code>key</code>和<code>val</code>都进行了<code>URL</code>转码</li><li><strong>multipart&#x2F;form-data：</strong>该种方式也是一种常见的<code>POST</code>提交方式，通常表单上传时使用</li><li><strong>application&#x2F;json：</strong>服务器消息主体是序列化后的<code>JSON</code>字符串</li><li><strong>text-xml：</strong>该种方式主要用来提交<code>XML</code>格式的数据</li></ol><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>属性规定在将表单数据发送到服务器之前如何对其进行编码<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>get 和 postd 的区别</title>
    <link href="/2022/06/17/get-%E5%92%8C-postd-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/06/17/get-%E5%92%8C-postd-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p><code>GET</code>和<code>POST</code>都是<code>HTTP</code>协议中发送请求的方法</p><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a><code>GET</code></h4><p><code>GET</code>方法请求一个指定资源的表示方式，使用GET的请求应该只被用于获取数据</p><p>####<code>POST</code></p><p><code>POST</code>方法用于将实体提交到指定的资源，通常导致服务器上的状态变化或副作用</p><p>本质上都是<code>TCP</code>连接，并无差别，但是由于<code>HTTP</code>的规定和浏览器&#x2F;服务器的限制，导致他们在应用过程中会体现出一些区别</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置</li><li>GET请求只能进行url编码，而POST请求支持多种编码方式</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留</li><li>GET请求在URL中传送的参数长度有限制，而POST没有</li><li>GET比POST更安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息</li><li>GET参数通过URL传递，而POST放在Request body中</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>代码输出结果</title>
    <link href="/2022/06/15/%E4%BB%A3%E7%A0%81%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C/"/>
    <url>/2022/06/15/%E4%BB%A3%E7%A0%81%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="promise"><a href="#promise" class="headerlink" title="promise"></a><code>promise</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">async1</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;async1&#x27;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;timer1&#x27;</span>)<br>  &#125;, <span class="hljs-number">2000</span>)<br>  <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise1&#x27;</span>)<br>  &#125;)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;async1 end&#x27;</span>)<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;async1 success&#x27;</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script start&#x27;</span>);<br><span class="hljs-title function_">async1</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;script end&#x27;</span>);<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-number">2</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>))<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-number">4</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res))<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;timer2&#x27;</span>)<br>&#125;, <span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">script start<br>async1<br>promise1<br>script end<br><span class="hljs-number">1</span><br>timer2<br>timer1<br></code></pre></td></tr></table></figure><p>代码的执行过程如下：</p><ol><li>首先执行同步代码，打印出<code>script start</code></li><li>遇到定时器<code>timer1</code>将其加入宏任务队列</li><li>之后是执行<code>Promise</code>，打印出<code>promise1</code>，由于<code>Promise</code>没有返回值，所以后面的代码不会执行</li><li>然后执行同步代码，打印出<code>script end</code></li><li>继续执行下面的代码<code>Promise</code>，<code>.then</code>和<code>.catch</code>期望参数是一个函数，这里传入的是一个数字，因此就会发生值渗透，将<code>reslove(1)</code>的值传到最后一个，直接打印出1</li><li>遇到第二个定时器，将其加入到微任务队列，执行微任务队列，按顺序依次执行两个定时器，但是由于定时器时间的原因，会在两秒后先打印出timer2，在四秒后打印出timer1</li></ol><h4 id="this"><a href="#this" class="headerlink" title="this"></a><code>this</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br>a.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>)<br></code></pre></td></tr></table></figure><p>打印结果：<code>window</code>对象</p><p>根据ECMAScript262规范规定：如果第一个参数传入的对象调用者是<code>null</code>或者<code>undefined</code>，<code>call</code>方法将把全局对象（浏览器上是<code>window</code>对象）作为<code>this</code>的值。所以，不管传入<code>null</code>还是<code>undefined</code>，其<code>this</code>都是全局对象<code>window</code>。</p><p>要注意的是，在严格模式中，<code>null</code> 就是 <code>null</code>，<code>undefined</code> 就是 <code>undefined</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br>a.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// null</span><br>a.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h4 id="原型-amp-继承"><a href="#原型-amp-继承" class="headerlink" title="原型&amp;继承"></a>原型&amp;继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><span class="hljs-keyword">var</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jane&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//Person.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//Object.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2.<span class="hljs-property">constructor</span>) <span class="hljs-comment">//Person</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p2.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">//undefined p2是实例，没有prototype属实</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property">constructor</span>) <span class="hljs-comment">//Function 一个空函数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">//打印出Person.prototype这个对象里所有的方法和属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span>) <span class="hljs-comment">//Person</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//Object.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//Function.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//Object.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Function</span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//Function.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//Function.prototype</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">//null</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>virtual dom (虚拟dom)</title>
    <link href="/2022/06/12/virtual-dom-%E8%99%9A%E6%8B%9Fdom/"/>
    <url>/2022/06/12/virtual-dom-%E8%99%9A%E6%8B%9Fdom/</url>
    
    <content type="html"><![CDATA[<h4 id="Virtual-Dom"><a href="#Virtual-Dom" class="headerlink" title="Virtual Dom"></a><code>Virtual Dom</code></h4><p><code>Virtual DOM</code>( 虚拟dom ) 是一个<code>javascript</code>对象，通过对象的方式表示dom结构，将页面的状态抽象为js对象的形式，搭配不同的渲染工具，实现跨平台的能力。通过事务处理机制，将多次dom修改的结果一次性的更新到页面上，有效的减少页面的渲染次数，和减少修改dom的重绘和重排次数，提高渲染性能</p><h4 id="React-Fiber"><a href="#React-Fiber" class="headerlink" title="React-Fiber"></a><code>React-Fiber</code></h4><p><code>React V15</code>在渲染时，会递归比对<code>Virtual DOM</code>树，找出需要变动的节点，然后同步更新它们。这个过程期间，<code>React</code>会占据浏览器资源，这会导致用户触发的事件得不到响应，并且会导致掉帧，用户感觉卡顿</p><p><code>Fiber</code>也称协程，协程本身没有并发和并行的能力，它只是一种控制流程让出的机制。让出<code>CPU</code>的执行权，让<code>cpu</code>能在这段时间执行其他操作。渲染的过程可以被中断，可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染</p><h4 id="diff算法的原理"><a href="#diff算法的原理" class="headerlink" title="diff算法的原理"></a><code>diff</code>算法的原理</h4><p>新老虚拟dom对比时：</p><ul><li>首页，对比节点本身，判断是否为同一节点，如果不是，则删除该节点，重新创建节点进行替换</li><li>如果是相同节点，进行patchVnode，处理子节点，如果其中新的没有children字段子节点，将久的子节点删除</li><li>比较如果都有子节点，则进行update Children，对新老节点的子节点进行操作</li><li>匹配时，找到相同的子节点，递归比较子节点</li></ul><p>在<code>diff</code>中，只对同层的子节点进行比较，放弃跨级节点比较，使得时间复杂从<code>O(n3)</code>降低到<code>O(n)</code>，只有当新旧children都为多个子节点时才需要用核心的<code>diff</code>算法进行同层比较</p><h4 id="Vue中key的作用"><a href="#Vue中key的作用" class="headerlink" title="Vue中key的作用"></a><code>Vue</code>中<code>key</code>的作用</h4><p>vue 中 key 值的作用可以分为两种情况来考虑：</p><ul><li>第一种情况是 v-if 中使用 key。由于 Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。因此当使用 v-if 来实现元素切换的时候，如果切换前后含有相同类型的元素，那么这个元素就会被复用。如果是相同的 input 元素，那么切换前后用户的输入不会被清除掉，这样是不符合需求的。因此可以通过使用 key 来唯一的标识一个元素，这个情况下，使用 key 的元素不会被复用。这个时候 key 的作用是用来标识一个独立的元素</li><li>第二种情况是 v-for 中使用 key。用 v-for 更新已渲染过的元素列表时，它默认使用“就地复用”的策略。如果数据项的顺序发生了改变，Vue 不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处的每个元素。因此通过为每个列表项提供一个 key 值，来以便 Vue 跟踪元素的身份，从而高效的实现复用。这个时候 key 的作用是为了高效的更新渲染虚拟 DOM</li></ul><p>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，diff 操作可以更准确、更快速</p><ul><li>更准确：因为带 key 就不是就地复用了，在 sameNode 函数a.key &#x3D;&#x3D;&#x3D; b.key对比中可以避免就地复用的情况。所以会更加准确</li><li>更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快</li></ul><p>使用index 作为 key和没写基本上没区别，因为不管数组的顺序怎么颠倒，index 都是 0, 1, 2…这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue-router 路由钩子</title>
    <link href="/2022/06/10/vue-router-%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/"/>
    <url>/2022/06/10/vue-router-%E8%B7%AF%E7%94%B1%E9%92%A9%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<h4 id="全局路由钩子"><a href="#全局路由钩子" class="headerlink" title="全局路由钩子"></a>全局路由钩子</h4><ul><li><code>router.beforeEach</code> 全局前置守卫 进入路由之前</li><li><code>router.beforeResolve</code> 全局解析守卫 在<code>beforeRouteEnter</code>调用之后凋也</li><li><code>router.afterEach </code> 全局后置钩子 进入路由之后</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span>;<br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">next</span>();<br>&#125;)<br>router.<span class="hljs-title function_">beforeResolve</span>(<span class="hljs-function">(<span class="hljs-params">to, form, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-title function_">next</span>();<br>&#125;)<br>router.<span class="hljs-title function_">afterEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;全局后置钩子&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="to-from-next参数"><a href="#to-from-next参数" class="headerlink" title="to,from,next参数"></a><code>to</code>,<code>from</code>,<code>next</code>参数</h5><p><code>to</code>: 将要进入的路由对象</p><p><code>from</code>：将要离开的路由对象</p><p><code>next:Function</code>进入路由，必须调用 <code>next()</code> </p><h4 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h4><ul><li><code>beforeEnter</code> 可以为某些路由单独配置守卫</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: login,<br>    <span class="hljs-attr">beforeEnter</span>: <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;即将进入路由&#x27;</span>);<br>      <span class="hljs-title function_">next</span>();<br>    &#125;<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><h4 id="组件内钩子"><a href="#组件内钩子" class="headerlink" title="组件内钩子"></a>组件内钩子</h4><ul><li><code>beforeRouteUpdate</code> 路由复用同一个组件时</li><li><code>beforeRouteEnter</code> 进入路由前</li><li><code>beforeRouteLeave</code> 离开当前路由</li></ul><p><code>beforeRouteEnter</code>组件内访问不到<code>this</code>因为钩子在组件实例还没被创建的时候调用，需要传一个回调给<code>next</code>来访问</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">beforeRouteEnter</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>)&#123;<br>  <span class="hljs-title function_">next</span>(<span class="hljs-function"><span class="hljs-params">vm</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//通过 `vm` 访问组件实例`this` 执行回调的时机在mounted后面，</span><br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>beforeRouteLeave</code> 导航离开该组件对应的路由时调用，eg: 禁止用户离开，或者在离开前做一些操作 清除定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">beforeRouteLeave</span>(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>)&#123;<br>  <span class="hljs-keyword">if</span>(flag)&#123;<br>    <span class="hljs-title function_">next</span>();<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_">next</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">//取消离开</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="完整路由导航解析流程"><a href="#完整路由导航解析流程" class="headerlink" title="完整路由导航解析流程"></a>完整路由导航解析流程</h4><ol><li>触发进入其他路由</li><li>调用要离开路由的组件守卫<code>beforeRouteLeave</code></li><li>调用全局前置守卫<code>beforeEach</code></li><li>在重用的组件里调用<code>beforeRouteUpdate</code></li><li>调用路由独享守卫<code>beforeEnter</code></li><li>解析异步路由组件</li><li>在将要进入的路由组件中调用<code>beforeRouteEnter</code></li><li>调用全局解析守卫<code>beforeResolve</code></li><li>导航被确认</li><li>调用全局后置钩子的<code>afterEach</code></li><li>触发DOM更新<code>mounted</code></li><li>执行<code>beforeRouteEnter</code>守卫中传给<code>next</code>的回调函数</li></ol><h4 id="触发钩子的完整顺序"><a href="#触发钩子的完整顺序" class="headerlink" title="触发钩子的完整顺序"></a>触发钩子的完整顺序</h4><p>将路由导航、<code>keep-alvie</code>、和组件生命周期钩子结合起来，触发顺序，假设是从a组件离开，第一次进入b组件</p><ol><li><code>beforeRouteLeave</code>路由组件的组件离开路由前钩子，可取消路由离开</li><li><code>beforeEach</code>路由全局前置守卫，可用于登录验证、全局路由loading等</li><li><code>beforeEnter</code>路由独享守卫</li><li><code>beforeRouteEnter</code>路由组件的组件进入路由前钩子</li><li><code>beforeResolve</code>路由全局解析守卫</li><li><code>afterEach</code>路由全局后置钩子</li><li><code>beforeCreate</code>组件生命周期，不能访问<code>this</code></li><li><code>created</code>组件生命周期，可以访问<code>this</code>，不能访问dom</li><li><code>beforeMount</code>组件生命周期</li><li><code>deactivated</code>离开缓存组件a，或者触发a的<code>beforeDestory</code>和<code>destroyed</code>组件销毁钩子</li><li><code>mounted</code>访问&#x2F;操作dom</li><li><code>activated</code>进入缓存组件，进入a的嵌套子组件</li><li>执行<code>beforeRouteEnter</code>回调函数<code>next</code></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据分类</title>
    <link href="/2022/06/08/%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB/"/>
    <url>/2022/06/08/%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h4 id="数据分类"><a href="#数据分类" class="headerlink" title="数据分类"></a>数据分类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">filterRepeatDetails</span> = (<span class="hljs-params">data, p1</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> list = [...data];<br>  <span class="hljs-keyword">let</span> res = [];<br>  <span class="hljs-keyword">while</span>(list.<span class="hljs-property">length</span> != <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">let</span> last = list.<span class="hljs-title function_">shift</span>();<br>    <span class="hljs-keyword">let</span> arr = [last];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;i&lt;list.<span class="hljs-property">length</span>;i++)&#123;<br>      <span class="hljs-keyword">if</span>(list[i][p1] === last[p1])&#123;<br>        arr = arr.<span class="hljs-title function_">concat</span>(list.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>))<br>        i--;<br>      &#125;<br>    &#125;<br>    res.<span class="hljs-title function_">push</span>(arr)<br>  &#125;<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>reduce 循环+异步</title>
    <link href="/2022/06/06/reduce-%E5%BE%AA%E7%8E%AF-%E5%BC%82%E6%AD%A5/"/>
    <url>/2022/06/06/reduce-%E5%BE%AA%E7%8E%AF-%E5%BC%82%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p>####<strong>reduce</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">testPromise</span>(<span class="hljs-params">time</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Processing <span class="hljs-subst">$&#123;time&#125;</span>`</span>)<br>      <span class="hljs-title function_">resolve</span>(time)<br>    &#125;, time)<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">let</span> result = [<span class="hljs-number">3000</span>,<span class="hljs-number">2000</span>,<span class="hljs-number">1000</span>, <span class="hljs-number">4000</span>].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc,nextId</span>)=&gt;</span>&#123;<br>  <span class="hljs-keyword">return</span> acc.<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">testPromise</span>(nextId)<br>  &#125;)<br>&#125;, <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>())<br><br>result.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">e</span>=&gt;</span>&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;All Promises Resolved !!✨&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>typescript</title>
    <link href="/2021/06/10/typescript/"/>
    <url>/2021/06/10/typescript/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>24 个 ES6 代码段</title>
    <link href="/2021/03/12/24-%E4%B8%AA-ES6-%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    <url>/2021/03/12/24-%E4%B8%AA-ES6-%E4%BB%A3%E7%A0%81%E6%AE%B5/</url>
    
    <content type="html"><![CDATA[<h4 id="1-如何隐藏所有指定元素？"><a href="#1-如何隐藏所有指定元素？" class="headerlink" title="1.如何隐藏所有指定元素？"></a><strong>1.如何隐藏所有指定元素？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">hide</span> = (<span class="hljs-params">...el</span>) =&gt; [...el].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> (e.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>));<br><span class="hljs-comment">// Example</span><br><span class="hljs-title function_">hide</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;img&#x27;</span>)); <span class="hljs-comment">// 隐藏页面上的所有img元素</span><br></code></pre></td></tr></table></figure><h4 id="2-如何确认元素是否具有指定的类？"><a href="#2-如何确认元素是否具有指定的类？" class="headerlink" title="2.如何确认元素是否具有指定的类？"></a><strong>2.如何确认元素是否具有指定的类？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">hasClass</span> = (<span class="hljs-params">el, className</span>) =&gt; el.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(className);<br><span class="hljs-comment">// Example</span><br><span class="hljs-title function_">hasClass</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p.special&#x27;</span>, <span class="hljs-string">&#x27;special&#x27;</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="3-如何切换元素的类？"><a href="#3-如何切换元素的类？" class="headerlink" title="3.如何切换元素的类？"></a><strong>3.如何切换元素的类？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">toggleClass</span> = (<span class="hljs-params">el, className</span>) =&gt; el.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(className);<br><span class="hljs-comment">// Example</span><br><span class="hljs-title function_">toggleClass</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p.special&#x27;</span>), <span class="hljs-string">&#x27;special&#x27;</span>);<br><span class="hljs-comment">// 该段不再有 &#x27;special&#x27; 类</span><br></code></pre></td></tr></table></figure><h4 id="4-如何获取当前页面的滚动位置？"><a href="#4-如何获取当前页面的滚动位置？" class="headerlink" title="4.如何获取当前页面的滚动位置？"></a><strong>4.如何获取当前页面的滚动位置？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getScrollPosition</span> = (<span class="hljs-params">el = <span class="hljs-variable language_">window</span></span>) =&gt; (&#123;<br>  <span class="hljs-attr">x</span>: el.<span class="hljs-property">pageXOffset</span> !== <span class="hljs-literal">undefined</span> ? el.<span class="hljs-property">pageXOffset</span> : el.<span class="hljs-property">scrollLeft</span>,<br>  <span class="hljs-attr">y</span>: el.<span class="hljs-property">pageYOffset</span> !== <span class="hljs-literal">undefined</span> ? el.<span class="hljs-property">pageYOffset</span> : el.<span class="hljs-property">scrollTop</span><br>&#125;)<br><span class="hljs-comment">// Example</span><br><span class="hljs-title function_">getScrollPosition</span>(); <span class="hljs-comment">// &#123;x: 0, y:200&#125;</span><br></code></pre></td></tr></table></figure><h4 id="5-如何平滑滚动到页面顶部？"><a href="#5-如何平滑滚动到页面顶部？" class="headerlink" title="5.如何平滑滚动到页面顶部？"></a><strong>5.如何平滑滚动到页面顶部？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">scrollToTop</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> c = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span>;<br>  <span class="hljs-keyword">if</span> ( c &gt; <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(scrollToTop);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">scrollTo</span>(<span class="hljs-number">0</span>, c - c / <span class="hljs-number">8</span>)<br>  &#125;<br>&#125;;<br><span class="hljs-comment">// example</span><br><span class="hljs-title function_">scrollToTop</span>();<br></code></pre></td></tr></table></figure><h4 id="如何确认父元素包含子元素？"><a href="#如何确认父元素包含子元素？" class="headerlink" title="如何确认父元素包含子元素？"></a><strong>如何确认父元素包含子元素？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">elementContains</span> = (<span class="hljs-params">parent, child</span>) =&gt; parent !== child &amp;&amp; parent.<span class="hljs-title function_">contains</span>(child);<br><span class="hljs-comment">// example</span><br><span class="hljs-title function_">elementContains</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;head&#x27;</span>), <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;title&#x27;</span>));<br><span class="hljs-comment">// true</span><br><span class="hljs-title function_">elementContains</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;body&#x27;</span>), <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;body&#x27;</span>));<br><span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="如何确认自定元素是否在视口可见？"><a href="#如何确认自定元素是否在视口可见？" class="headerlink" title="如何确认自定元素是否在视口可见？"></a><strong>如何确认自定元素是否在视口可见？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">elementIsVisibleInViewport</span> = (<span class="hljs-params">el, partiallyVisible = <span class="hljs-literal">false</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> &#123; top, left, bottom, right &#125; = el.<span class="hljs-title function_">getBoundingClientRect</span>();<br>  <span class="hljs-keyword">const</span> &#123; innerHeight, innerWidth &#125; = <span class="hljs-variable language_">window</span>;<br>  <span class="hljs-keyword">return</span> partiallyVisible ? ((top &gt; <span class="hljs-number">0</span> &amp;&amp; top &lt; innerHeight) || (bottom &gt; <span class="hljs-number">0</span> &amp;&amp; bottom &lt; innerHeight)) &amp;&amp; ((left &gt; <span class="hljs-number">0</span> &amp;&amp; left &lt; innerWidth) || (right &gt; <span class="hljs-number">0</span> &amp;&amp; right &lt; innerWidth)) : top &gt;= <span class="hljs-number">0</span> &amp;&amp; left &gt;= <span class="hljs-number">0</span> &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerHeight;<br>&#125;<br><span class="hljs-comment">// exmaple</span><br><span class="hljs-title function_">elementIsVisibleInViewport</span>(el); <span class="hljs-comment">// (不完全可见) </span><br><span class="hljs-title function_">elementIsVisibleInViewport</span>(el, <span class="hljs-literal">true</span>); <span class="hljs-comment">// (部分可见)</span><br></code></pre></td></tr></table></figure><h4 id="如何获取一个元素内的所有图像？"><a href="#如何获取一个元素内的所有图像？" class="headerlink" title="如何获取一个元素内的所有图像？"></a><strong>如何获取一个元素内的所有图像？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getImages</span> = (<span class="hljs-params">el, includeDuplicates = <span class="hljs-literal">false</span></span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> images = [...el.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;img&#x27;</span>)].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">img</span> =&gt;</span> img.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;src&#x27;</span>));<br>  <span class="hljs-keyword">return</span> includeDuplicates ? images : [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(images)];<br>&#125;<br><span class="hljs-comment">// example</span><br><span class="hljs-title function_">getImages</span>(<span class="hljs-variable language_">document</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// [&#x27;image1.jpg&#x27;, &#x27;image2.png&#x27;, &#x27;image1.png&#x27;, &#x27;...&#x27;] </span><br><span class="hljs-title function_">getImages</span>(<span class="hljs-variable language_">document</span>, <span class="hljs-literal">false</span>); <span class="hljs-comment">// [&#x27;image1.jpg&#x27;, &#x27;image2.png&#x27;, &#x27;...&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="如何分辨设备是否是移动设备还是桌面设备？"><a href="#如何分辨设备是否是移动设备还是桌面设备？" class="headerlink" title="如何分辨设备是否是移动设备还是桌面设备？"></a><strong>如何分辨设备是否是移动设备还是桌面设备？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">detectDeviceType</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>) ? <span class="hljs-string">&#x27;Mobile&#x27;</span> : <span class="hljs-string">&#x27;Desktop&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//exmaple</span><br><span class="hljs-title function_">detectDeviceType</span>();<br></code></pre></td></tr></table></figure><h4 id="如何获取当前的URL？"><a href="#如何获取当前的URL？" class="headerlink" title="如何获取当前的URL？"></a><strong>如何获取当前的<code>URL</code>？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">currentURL</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>;<br><span class="hljs-comment">// example</span><br><span class="hljs-title function_">currentURL</span>();<br></code></pre></td></tr></table></figure><h4 id="如何创建一个包含当前URL参数的对象？"><a href="#如何创建一个包含当前URL参数的对象？" class="headerlink" title="如何创建一个包含当前URL参数的对象？"></a><strong>如何创建一个包含当前<code>URL</code>参数的对象？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getURLParameters</span> = url =&gt; <br>(url.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/([^?=&amp;]+)(=([^&amp;]*))/g</span>) || []).<span class="hljs-title function_">reduce</span>(<br>  <span class="hljs-function">(<span class="hljs-params">a, v</span>) =&gt;</span> ((a[v.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, v.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;=&#x27;</span>))] = v.<span class="hljs-title function_">slice</span>(v.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;=&#x27;</span>) + <span class="hljs-number">1</span>)), a),<br>    &#123;&#125;<br>  );<br><span class="hljs-comment">// Examples </span><br><span class="hljs-title function_">getURLParameters</span>(<span class="hljs-string">&#x27;http://url.com/page?n=Adam&amp;s;=Smith&#x27;</span>); <br><span class="hljs-comment">// &#123;n: &#x27;Adam&#x27;, s: &#x27;Smith&#x27;&#125; </span><br><span class="hljs-title function_">getURLParameters</span>(<span class="hljs-string">&#x27;google.com&#x27;</span>); <span class="hljs-comment">// &#123;&#125;</span><br></code></pre></td></tr></table></figure><h4 id="如何将一组表单元素编码为一个对象"><a href="#如何将一组表单元素编码为一个对象" class="headerlink" title="如何将一组表单元素编码为一个对象?"></a><strong>如何将一组表单元素编码为一个对象?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">formToObject</span> = form =&gt; <br>  <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(form)).<span class="hljs-title function_">reduce</span>(<br>  <span class="hljs-function">(<span class="hljs-params">acc, [key, value]</span>) =&gt;</span> (&#123;<br>      ...acc,<br>      [key]: value<br>    &#125;),<br>    &#123;&#125;<br>  );<br><span class="hljs-comment">// example</span><br><span class="hljs-title function_">formToObject</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#form&#x27;</span>)); <br><span class="hljs-comment">// &#123; email: &#x27;test@email.com&#x27;, name: &#x27;Test Name&#x27; &#125;</span><br></code></pre></td></tr></table></figure><h4 id="如何从对象中检索给定选择器指示的一组属性？"><a href="#如何从对象中检索给定选择器指示的一组属性？" class="headerlink" title="如何从对象中检索给定选择器指示的一组属性？"></a><strong>如何从对象中检索给定选择器指示的一组属性？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br></code></pre></td></tr></table></figure><h4 id="如何在等待一定时间后调用提供的函数（单位毫秒）"><a href="#如何在等待一定时间后调用提供的函数（单位毫秒）" class="headerlink" title="如何在等待一定时间后调用提供的函数（单位毫秒）?"></a><strong>如何在等待一定时间后调用提供的函数（单位毫秒）?</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">delay</span> = (<span class="hljs-params">fn, wait, ...args</span>) =&gt; <span class="hljs-built_in">setTimeout</span>(fn, wait, ...args);<br><span class="hljs-title function_">delay</span>(<br><span class="hljs-keyword">function</span>(<span class="hljs-params">text</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text);<br>  &#125;, <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;later&#x27;</span><br>)<br><span class="hljs-comment">// 一秒后记录 &#x27;later&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js并集、交集、差集</title>
    <link href="/2021/03/11/js%E5%B9%B6%E9%9B%86%E3%80%81%E4%BA%A4%E9%9B%86%E3%80%81%E5%B7%AE%E9%9B%86/"/>
    <url>/2021/03/11/js%E5%B9%B6%E9%9B%86%E3%80%81%E4%BA%A4%E9%9B%86%E3%80%81%E5%B7%AE%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h4 id="ES7-amp-Array-prototype-includes"><a href="#ES7-amp-Array-prototype-includes" class="headerlink" title="ES7&amp;Array.prototype.includes"></a><strong><code>ES7</code>&amp;<code>Array.prototype.includes</code></strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 并集</span><br><span class="hljs-keyword">let</span> union = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> [...a,...(b.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>!a.<span class="hljs-title function_">includes</span>(v)))]<br>&#125;<br><span class="hljs-comment">// 交集</span><br><span class="hljs-keyword">let</span> intersection = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> [...(a.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>b.<span class="hljs-title function_">includes</span>(v)))]<br>&#125;<br><span class="hljs-comment">// 差集</span><br><span class="hljs-keyword">let</span> difference = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>  <span class="hljs-keyword">return</span> [...a,...b].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>!a.<span class="hljs-title function_">includes</span>(v)||!b.<span class="hljs-title function_">includes</span>(v))<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ES6-amp-Set"><a href="#ES6-amp-Set" class="headerlink" title="ES6&amp;Set"></a><strong><code>ES6</code>&amp;<code>Set</code></strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 并集</span><br><span class="hljs-keyword">let</span> union = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...a,...b]))<br>&#125;<br><span class="hljs-comment">// 交集</span><br><span class="hljs-keyword">let</span> intersection = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(a.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(b)).<span class="hljs-title function_">has</span>(v)))<br>&#125;<br><span class="hljs-comment">// 差集</span><br><span class="hljs-keyword">let</span> difference = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>([...a,...b].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>!(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(a)).<span class="hljs-title function_">has</span>(v)||!(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(b)).<span class="hljs-title function_">has</span>(v)))<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="ES5-amp-indexOf"><a href="#ES5-amp-indexOf" class="headerlink" title="ES5&amp;indexOf"></a><strong><code>ES5</code>&amp;<code>indexOf</code></strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 并集</span><br><span class="hljs-keyword">var</span> union = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>  <span class="hljs-keyword">return</span> a.<span class="hljs-title function_">concat</span>(b.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)&#123;<br>  <span class="hljs-keyword">return</span> a.<span class="hljs-title function_">indexOf</span>(v) === -<span class="hljs-number">1</span><br>&#125;))<br>&#125;<br><span class="hljs-comment">// 交集</span><br><span class="hljs-keyword">var</span> intersection = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)&#123;<br>  <span class="hljs-keyword">return</span> b.<span class="hljs-title function_">indexOf</span>(v) &gt; -<span class="hljs-number">1</span><br>&#125;)<br>&#125;<br><span class="hljs-comment">// 差集</span><br><span class="hljs-keyword">var</span> difference = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br>  <span class="hljs-keyword">return</span> a.<span class="hljs-title function_">concat</span>(b).<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>)&#123;<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-title function_">indexOf</span>(v) === -<span class="hljs-number">1</span> || b.<span class="hljs-title function_">indexOf</span>(v) === -<span class="hljs-number">1</span><br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue 面试题（转载）</title>
    <link href="/2021/03/04/vue-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
    <url>/2021/03/04/vue-%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="1-说说你对SPA单页页面的理解，它的优缺点分别是什么？"><a href="#1-说说你对SPA单页页面的理解，它的优缺点分别是什么？" class="headerlink" title="1.说说你对SPA单页页面的理解，它的优缺点分别是什么？"></a><strong>1.说说你对<code>SPA</code>单页页面的理解，它的优缺点分别是什么？</strong></h4><p><code>SPA（single-page application）</code>仅在Web页面初始化时加载相应的<code>HTML</code>、<code>JavaScript</code>和<code>CSS</code>。一旦页面加载完成，<code>SPA</code>不会因为用户操作而进行页面的重新加载和跳转；取而代之的是利用路由机制实现<code>HTML</code>内容的转换，<code>UI</code>与用户的交互，避免页面的重新加载。</p><p>优点</p><ul><li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li><li>基于上面一点，<code>SPA</code>相对对服务器压力小；</li><li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</li></ul><p>缺点</p><ul><li>初次加载耗时多：为实现单页<code>Web</code>应用功能及现实效果，需要在加载页面的时候将<code>Java script</code>、<code>CSS</code>统一加载，部分页面按需加载；</li><li>前进后退路由管理：由于单页应用在一个页面中现实所有内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li><li><code>SEO</code>难度较大：由于所有的内容都在一个页面中动态替换显示，所以在<code>SEO</code>上有着天然的弱势</li></ul><h4 id="2-怎么理解Vue的单向数据流"><a href="#2-怎么理解Vue的单向数据流" class="headerlink" title="2.怎么理解Vue的单向数据流"></a><strong>2.怎么理解<code>Vue</code>的单向数据流</strong></h4><p>所有的<code>prop</code>都是使得其父子<code>prop</code>之间形成了一个<strong>单向下行绑定：</strong>父级<code>prop</code>的更新会向下流动到子组件中，但是反过来则不行。这样可以防止从子组件意外改变父级组件的状态，从而导致应用的数据流向难以理解。</p><p>额外的，每次父级组件发生更新时，子组件中所有的<code>prop</code>都会刷新到最新的值。这意味着你不应该在一个子组件内部改变<code>prop</code>。如果你这样做了，<code>Vue</code>会在浏览器的控制台中发出警告。子组件想修改时，只能通过<code>$emit</code>派发出一个自定义事件，父组件接收到后，由父组件修改。</p><p>有两种常见的试图改变一个<code>prop</code>的情形：</p><ul><li><strong>这个<code>prop</code>用来传递一个初始值；这个子组件接下来希望将其作为一个本地的<code>prop</code>数据来使用</strong>。这种情况下，最好定义一个本地的<code>data</code>属性并将这个<code>prop</code>用作其初始值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;initialCounter&#x27;</span>],<br><span class="hljs-attr">data</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">counter</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">initialCounter</span><br>  &#125;<br>&#125; <br></code></pre></td></tr></table></figure><ul><li>这个<code>prop</code>以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个<code>prop</code>的值来定义一个计算属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;size&#x27;</span>],<br><span class="hljs-attr">computed</span>: &#123;<br>  <span class="hljs-attr">normalizedSize</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span>.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">toLowerCase</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>####<strong>3.computed和watch的区别和运用的场景</strong></p><p><code>computed</code>：是计算属性，依赖其他属性值，并且<code>computed</code>的值有缓存，只有它依赖的属性值发生改变，下一次获取<code>computed</code>的值时才会 重新计算<code>computed</code>的值；</p><p><code>watch</code>：更多的是「观察」的作用，类似于某些数据的监听回调，每当监听的数据发生变化时都会执行回调进行后续的操作；</p><p><strong>运用场景</strong></p><ul><li>当我们需要进行数值计算，并且依赖于其他数据时，应该使用<code>computed</code>，因为可以利用<code>computed</code>的缓存特性，避免每次获取值时，都要重新计算;</li><li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用<code>watch</code>，使用<code>watch</code>选项允许我们执行异步操作（访问一个API）,限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li></ul><h4 id="4-直接给一个数组项赋值，Vue能检测到变化吗？"><a href="#4-直接给一个数组项赋值，Vue能检测到变化吗？" class="headerlink" title="4.直接给一个数组项赋值，Vue能检测到变化吗？"></a><strong>4.直接给一个数组项赋值，<code>Vue</code>能检测到变化吗？</strong></h4><p>由于<code>javascript</code>的限制，<code>Vue</code>不能检测到以下数组的变动：</p><ul><li>当你利用索引直接设置一个数组项时，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>当你修改数组长度时，例如：<code>vm.items.length = newLength</code></li></ul><p>为了解决第一个问题，<code>Vue</code>提供了以下操作方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Vue.set</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">set</span>(vm.<span class="hljs-property">items</span>, indexOfItem, newValue)<br><span class="hljs-comment">// vm.$set, Vue.set的一个别名</span><br>vm.$set(vm.<span class="hljs-property">items</span>, indexOfItem, newValue)<br><span class="hljs-comment">// Array.prototype.splice</span><br>vm.<span class="hljs-property">items</span>.<span class="hljs-title function_">splice</span>(itemOfItem, <span class="hljs-number">1</span>, newValue)<br></code></pre></td></tr></table></figure><p>为了解决第二个问题，<code>Vue</code>提供了以下操作方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Array.prototype.splice</span><br>vm.<span class="hljs-property">items</span>.<span class="hljs-title function_">splice</span>(newLength)<br></code></pre></td></tr></table></figure><h4 id="5-Vue的父组件和子组件生命周期钩子函数执行顺序"><a href="#5-Vue的父组件和子组件生命周期钩子函数执行顺序" class="headerlink" title="5.Vue的父组件和子组件生命周期钩子函数执行顺序"></a><strong>5.<code>Vue</code>的父组件和子组件生命周期钩子函数执行顺序</strong></h4><p><code>Vue</code>的父组件和子组件生命周期钩子函数执行顺序可以归类为以下4部分：</p><ul><li><p>加载渲染过程</p><p>父<code>beforeCreate</code> -&gt; 父<code>created</code> -&gt; 父<code>beforeMount</code> -&gt; 子<code>beforeCreate</code> -&gt; 子<code>created</code> -&gt; </p><p>子<code>beforeMount</code> -&gt; 子<code>mounted</code> -&gt; 父<code>mounted</code></p></li><li><p>子组件更新过程</p><p>父<code>beforeUpdate</code> -&gt; 子<code>beforeUpdate</code> -&gt; 子<code>updated</code> -&gt; 父<code>updated</code></p></li><li><p>父组件更新过程</p><p>父<code>beforeUpdate</code> -&gt; 父<code>updated</code></p></li><li><p>销毁过程</p><p>父<code>beforeDestroy</code> -&gt; 子<code>beforeDestroy</code> -&gt; 子<code>destroyed</code> -&gt; 父<code>destroyed</code></p></li></ul><h4 id="6-在哪个生命周期内调用异步请求"><a href="#6-在哪个生命周期内调用异步请求" class="headerlink" title="6.在哪个生命周期内调用异步请求?"></a><strong>6.在哪个生命周期内调用异步请求?</strong></h4><p>可以在钩子函数<code>created</code>、<code>beforeMount</code>、<code>mounted</code>中进行调用，因为在这三个钩子函数中，<code>data</code>已经创建，可以将服务端返回的数据进行赋值。但是推荐在<code>created</code>钩子函数中调用异步请求，因为在<code>created</code>钩子函数中调用异步请求有以下优点：</p><ul><li>能更快获取到服务端数据，减少页面<code>loading</code>事件；</li><li><code>ssr</code>不支持<code>beforeMount</code>、<code>mounted</code>钩子函数，所以放在<code>created</code>中有助于一致性；</li></ul><h4 id="7-在什么阶段才能访问操作DOM"><a href="#7-在什么阶段才能访问操作DOM" class="headerlink" title="7.在什么阶段才能访问操作DOM?"></a><strong>7.在什么阶段才能访问操作<code>DOM</code>?</strong></h4><p>在钩子函数<code>mounted</code>被调用前，<code>Vue</code>已经将编译好的模版挂载到页面上，所以在<code>mounted</code>中可以访问操作<code>DOM</code>。</p><h4 id="8-父组件可以监听子组件的生命周期吗"><a href="#8-父组件可以监听子组件的生命周期吗" class="headerlink" title="8.父组件可以监听子组件的生命周期吗?"></a><strong>8.父组件可以监听子组件的生命周期吗?</strong></h4><p>比如有父组件<code>Parent</code>和子组件<code>Child</code>，如果父组件监听到子组件挂载<code>mounted</code>就做一些逻辑处理，可以通过以下写法实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Parent.vue</span><br>&lt;<span class="hljs-title class_">Child</span> @mounted=<span class="hljs-string">&quot;doSomething&quot;</span>/&gt;<br>  <br><span class="hljs-comment">// Child.vue</span><br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;mounted&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>以上需要手动通过<code>$emit</code>触发父组件的事件，更简单的方式可以在父组件引用子组件时通过<code>@hook</code>来监听即可，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Parent.vue</span><br>&lt;<span class="hljs-title class_">Child</span> @<span class="hljs-attr">hook</span>:mounted=<span class="hljs-string">&quot;doSomething&quot;</span>/&gt;<br>  <br><span class="hljs-title function_">doSomething</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;父组件监听到 mounted 钩子函数 ...&#x27;</span>)<br>&#125;<br>  <br><span class="hljs-comment">// Child.vue</span><br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;子组件触发 mounted 钩子函数 ...&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">// 以上输出顺序为：</span><br><span class="hljs-comment">// 子组件触发 mounted 钩子函数 ...</span><br><span class="hljs-comment">// 父组件监听到 mounted 钩子函数 ... </span><br></code></pre></td></tr></table></figure><p><code>@hook</code>方法不仅可以监听<code>mounted</code>，其他生命周期事件，例如：<code>created</code>，<code>updated</code>等都可以监听。</p><h4 id="9-谈谈你对keep-alive的了解"><a href="#9-谈谈你对keep-alive的了解" class="headerlink" title="9.谈谈你对keep-alive的了解"></a><strong>9.谈谈你对<code>keep-alive</code>的了解</strong></h4><p><code>keep-alive</code>是<code>Vue</code>内置的一个组件，可以是包含的组件保留状态，避免重新渲染，其有以下特性：</p><ul><li>一般结合路由和动态组件一起使用，用于缓存组件；</li><li>提供<code>include</code>和<code>exclude</code>属性，两者都支持字符串或正则表达式，<code>include</code>表示只有名称匹配的组件会被缓存，<code>exclude</code>表示任何名称匹配的组件都不会被缓存，其中<code>exclude</code>的优先级比<code>include</code>高；</li><li>对应两个钩子函数<code>activated</code>和<code>deactivated</code>，当组件被激活时，触发钩子函数<code>activated</code>，当组件被移除时，触发钩子函数<code>deactivated</code>。</li></ul><h4 id="10-v-model的原理"><a href="#10-v-model的原理" class="headerlink" title="10.v-model的原理"></a><strong>10.<code>v-model</code>的原理</strong></h4><p>在<code>vue</code>项目中主要使用<code>v-model</code>指令在表单<code>input</code>、<code>textarea</code>、<code>select</code>等元素上创建双向数据绑定，我们知道<code>v-model</code>本质上不过是语法糖，<code>v-model</code>在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><ul><li><code>text</code>和<code>textarea</code>元素使用<code>value</code>属性和<code>input</code>事件；</li><li><code>checkbox</code>和<code>radio</code>使用<code>checked</code>属性和<code>change</code>事件；</li><li><code>select</code>字段将<code>value</code>作为<code>prop</code>并将<code>change</code>作为事件。</li></ul><p>以<code>input</code>表单元素为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt; input v-model=<span class="hljs-string">&quot;something&quot;</span> /&gt;<br><span class="hljs-comment">// 相当于</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;something&quot;</span> <span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;something = $event.target.value&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><p>如果在自定义组件中，<code>v-model</code>默认会利用名为<code>value</code>的<code>prop</code>和名为<code>input</code>的事件，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 父组件</span><br>&lt;<span class="hljs-title class_">ModelChild</span> v-model=<span class="hljs-string">&quot;message&quot;</span>&gt;&lt;/<span class="hljs-title class_">ModelChild</span>&gt;<br><br><span class="hljs-comment">// 子组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="hljs-attr">props</span>:&#123;<br><span class="hljs-attr">value</span>: <span class="hljs-title class_">String</span><br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">test1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;input&#x27;</span>,<span class="hljs-string">&#x27;小红&#x27;</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11-Vue组件间通信有哪几种方式"><a href="#11-Vue组件间通信有哪几种方式" class="headerlink" title="11.Vue组件间通信有哪几种方式"></a><strong>11.<code>Vue</code>组件间通信有哪几种方式</strong></h4><p><code>Vue</code>组件间通信主要有：父子组件通信、隔代组件通信、兄弟组件通信</p><ol><li><p><code>prop / $emit</code>适用 <strong>父子组件通信</strong></p></li><li><p><code>ref</code>与 <code>$parent</code>&#x2F; <code>$children</code>适用 <strong>父子组件通信</strong></p><p><code>ref</code>：如果在普通的<code>DOM</code>元素上使用，引用者向的就是<code>DOM</code>元素；如果用在子组件上，引用的就是指向组件实例</p><p><code>$parent</code>&#x2F; <code>$children</code>：访问父 &#x2F; 子实例</p></li><li><p><code>EventBus</code>（<code>$emit</code>&#x2F;<code>$on</code>）适用于<strong>父子，隔代，兄弟组件通信</strong></p><p>这种方法通过一个空的<code>Vue</code>实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从二实现任何组件间的通信，包括父子、隔代、兄弟组件</p></li><li><p><code>$attrs</code>&#x2F;<code>$listeners</code>适用于<strong>隔代组件通信</strong></p><p><code>$attrs</code>: 包含了父作用域中不被<code>prop</code>所设别（且获取）的特性绑定（<code>class</code>和<code>style</code>除外）。当一个组件没有声明任何<code>prop</code>时，这里会包含所有父作用域的绑定（<code>class</code>和<code>style</code>除外），并且可以通过<code>v-bind=&quot;$attrs&quot;</code>传入内部组件。通常配合<code>inheritAttrs</code>选项一起使用。</p><p><code>$listeners</code>：包含了父作用域中的（不含<code>.native</code>修饰器）<code>v-on</code>事件监听器。它可以通过<code>v-on=&quot;$listeners&quot;传入内部组件</code></p></li><li><p><code>provide</code>&#x2F;<code>inject</code>适用于<strong>隔代组件通信</strong></p><p>祖先组件中通过<code>provider</code>来提供变量，然后在子孙组件中通过<code>inject</code>来注入变量。<code>provide</code>&#x2F;<code>inject API</code>主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系</p></li><li><p><code>Vuex</code>适用于<strong>父子、隔代、兄弟组件通信</strong></p><p><code>Vuex</code>是一个专门为<code>Vue.js</code>应用程序开发的状态管理模式。每一个<code>Vuex</code>应用的核心就是<code>store</code>（仓库）。<code>store</code>基本就是一个容器，它包含着应用中大部分的状态（<code>state</code>）</p><ul><li><code>Vuex</code>的状态存储是响应式的。当<code>Vue</code>组件从<code>store</code>中读取状态的时候，若<code>store</code>中的状态发生变化，那么相应的组件也会高效更新。</li><li>改变<code>store</code>中的状态的唯一途径就是显示地提交（<code>commit</code>）<code>mutation</code>。这样使得我们可以方便地追踪每一个状态的变化。</li></ul></li></ol><h4 id="12-你用过Vuex吗？"><a href="#12-你用过Vuex吗？" class="headerlink" title="12.你用过Vuex吗？"></a><strong>12.你用过<code>Vuex</code>吗？</strong></h4><p><code>Vuex</code>是一个专门为<code>Vue.js</code>应用程序开发的状态管理模式。每一个<code>Vuex</code>应用的核心就是<code>store</code>（仓库）。<code>store</code>基本就是一个容器，它包含着应用中大部分的状态（<code>state</code>）</p><ol><li><code>Vuex</code>的状态存储是响应式的。当<code>Vue</code>组件从<code>store</code>中读取状态的时候，若<code>store</code>中的状态发生变化，那么相应的组件也会高效更新。</li><li>改变<code>store</code>中的状态的唯一途径就是显示地提交（<code>commit</code>）<code>mutation</code>。这样使得我们可以方便地追踪每一个状态的变化。</li></ol><p>主要包含以下几个模块：</p><ul><li><code>State</code>：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</li><li><code>Getter</code>：允许组件从<code>Store</code>中获取数据，<code>mapGetters</code>辅助函数仅仅是将<code>store</code>中的<code>getter</code>映射到局部计算属性。</li><li><code>Motation</code>：是唯一更改<code>store</code>中状态的方法，且必须是同步函数。</li><li><code>Action</code>：用于提交<code>mutation</code>，而不是直接变更状态，可以包含任意异步操作。</li><li><code>Module</code>：允许将单一的<code>Store</code>拆分为多个<code>store</code>且同时保存在单一的状态中。</li></ul><h4 id="13-Vue是如何实现数据双向绑定的？"><a href="#13-Vue是如何实现数据双向绑定的？" class="headerlink" title="13.Vue是如何实现数据双向绑定的？"></a><strong>13.<code>Vue</code>是如何实现数据双向绑定的？</strong></h4><p><code>Vue</code>主要通过以下<strong>4</strong>步骤来实现数据双向绑定的：</p><ul><li>实现一个监听器<code>Observer</code>：对数据对象进行遍历，包括子属性对象的属性，利用<code>Object.defineProperty()</code>对属性都加上<code>setter</code>和<code>getter</code>。这样的话，给这个对象的某个值赋值，就会触发<code>setter</code>，那么就能监听到了数据变化。</li><li>实现一个解析器<code>Compile</code>：解析<code>Vue</code>模板指令，将模版中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。</li><li>实现一个订阅者<code>Watcher</code>：<code>Watcher</code>订阅者是<code>Observer</code>和<code>Compile</code>之间的通信桥梁，主要的任务是订阅<code>Observer</code>中的属性值变化的消息，当收到属性变化的消息时，触发解析器<code>Compile</code>中对应的更新函数。</li><li>实现一个订阅器<code>Dep</code>：订阅器采用<strong>发布-订阅</strong>设计模式，用来收集订阅者<code>Watcher</code>，对监听器<code>Observer</code>和订阅者<code>Watcher</code>进行统一管理。</li></ul><h4 id="14-Vue框架怎么实现对象和数组的监听？"><a href="#14-Vue框架怎么实现对象和数组的监听？" class="headerlink" title="14.Vue框架怎么实现对象和数组的监听？"></a><strong>14.<code>Vue</code>框架怎么实现对象和数组的监听？</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Observe a list of Array items.</span><br><span class="hljs-comment"> */</span><br>observeArray (<span class="hljs-attr">items</span>: <span class="hljs-title class_">Array</span>&lt;any&gt;) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = items.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>  <span class="hljs-title function_">observe</span>(items[i])  <span class="hljs-comment">// observe 功能为监测数据的变化</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 对属性进行递归遍历</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">let</span> childOb = !shallow &amp;&amp; <span class="hljs-title function_">observe</span>(val) <span class="hljs-comment">// observe 功能为监测数据的变化</span><br></code></pre></td></tr></table></figure><p><code>Vue</code>框架通过遍历数组和递归遍历对象，从而达到利用<code>Object.difineProperty()</code>也能对对象和数组（部分方法的操作）进行监听。</p><h4 id="15-Proxy与Object-defineProperty优劣对比"><a href="#15-Proxy与Object-defineProperty优劣对比" class="headerlink" title="15.Proxy与Object.defineProperty优劣对比"></a><strong>15.<code>Proxy</code>与<code>Object.defineProperty</code>优劣对比</strong></h4><p><code>Proxy</code>的优势如下：</p><ul><li><code>Proxy</code>可以直接监听对象和非属性；</li><li><code>Proxy</code>可以直接监听数组的变化；</li><li><code>Proxy</code>有多达13种拦截方法啊，不限于<code>appley、</code>ownKeys<code>、</code>delectProperty<code>、</code>has<code>等等是</code>Object.defineProperty&#96;不具备的；</li><li><code>Proxy</code>返回的是一个新对象，我们可以只操作新对象而达到目的，而<code>Object.defineProperty</code>只能遍历对象属性直接修改；</li><li><code>Proxy</code>作为新标准受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利。</li></ul><p><code>Object.defineProperty</code>的优势如下：</p><ul><li>兼容性好，支持<code>IE9</code>，而<code>Proxy</code>存在浏览器兼容性问题，而且无法利用<code>polyfill</code>磨平。</li></ul><h4 id="15-虚拟DOM的实现原理"><a href="#15-虚拟DOM的实现原理" class="headerlink" title="15.虚拟DOM的实现原理?"></a><strong>15.虚拟<code>DOM</code>的实现原理?</strong></h4><ul><li>用<code>javascript</code>对象模拟真实的<code>DOM</code>树，对真实的<code>DOM</code>进行抽象；</li><li><code>diff</code>算法 – 比较两颗虚拟<code>DOM</code>树的差异；</li><li><code>pach</code>算法 – 将两个虚拟<code>DOM</code>对象的差异应用到真正的<code>DOM</code>树</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>跨域</title>
    <link href="/2020/10/23/%E8%B7%A8%E5%9F%9F/"/>
    <url>/2020/10/23/%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h4><p>跨域是指一个域下的文档或脚本试图去请求另一个域下的资源。</p><p>在前端领域，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能同源使用的局限</p><p>####什么是同源策略</p><p>同源策略是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也是最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击，所谓同源是指”协议 + 域名 + 端口” 三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><h5 id="同源策略限制以下几种行为"><a href="#同源策略限制以下几种行为" class="headerlink" title="同源策略限制以下几种行为"></a>同源策略限制以下几种行为</h5><ul><li>Cookie、LocalStorage和IndexDB无法读取</li><li>DOM和JS对象无法获得</li><li>AJAX请求不能发送</li></ul><h4 id="常用解决跨域的方法"><a href="#常用解决跨域的方法" class="headerlink" title="常用解决跨域的方法"></a>常用解决跨域的方法</h4><h5 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h5><p>利用<code>&lt;script&gt;</code>标签没有跨域限制的漏洞。通过<code>&lt;script&gt;</code>标签指向需要访问的地址并提供一个回调函数来接收数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script src=<span class="hljs-string">&quot;http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp&quot;</span>&gt;&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">jsonp</span>(<span class="hljs-params">data</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>JSONP使用简单且兼容性不错，但是只局限于<code>get</code>请求</p><p>JSONP封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">jsonp</span>(<span class="hljs-params">url, jsonpCallback, success</span>)&#123;<br>  <span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>  script.<span class="hljs-property">src</span> = url<br>  script.<span class="hljs-property">async</span> = <span class="hljs-literal">true</span><br>  script.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;text/javascript&#x27;</span><br>  <span class="hljs-variable language_">window</span>[jsonpCallback] = <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>    success &amp;&amp; <span class="hljs-title function_">success</span>(data)<br>  &#125;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script)<br>&#125;<br><span class="hljs-title function_">jsonp</span>(<span class="hljs-string">&#x27;http://xxxx&#x27;</span>, <span class="hljs-string">&#x27;callback&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h5><p>CORS需要浏览器和后端同时支持。IE 8 和 9 需要通过<code>XDomainRequest</code>来实现</p><p>浏览器会自动进行CORS通信，实现CORS通信的关键是后端。只要后端实现了CORS，就实现了跨域</p><p>服务端设置<code>Access-Control-Allow-Origin</code>就可以开启CORS。该属性表示哪些域名跨域访问资源，如果设置通配符则表示所有网站都跨域访问资源.</p><h5 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h5><p>该方式只能用于二级域名相同都情况下，比如<code>a.test.com</code>和<code>b.test.com</code>适用该方式。</p><p>只需要给页面添加<code>document.domain = &#39;test.com&#39;</code>表示二级域名都相同就可以实现跨域</p><h5 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h5><p>这种方式通常用于获取嵌入页面中的第三方页面数据。一个页面发送消息，另一个页面判断来源并接收消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//发送消息端</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">parent</span>.<span class="hljs-title function_">postMessage</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-string">&#x27;http://test.com&#x27;</span>)<br><span class="hljs-comment">//接收消息端</span><br><span class="hljs-keyword">var</span> mc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageChannel</span>()<br>mc.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> origin = event.<span class="hljs-property">origin</span> || event.<span class="hljs-property">originalEvent</span>.<span class="hljs-property">origin</span><br>  <span class="hljs-keyword">if</span>(origin === <span class="hljs-string">&#x27;http://test.com&#x27;</span> )&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;验证通过&#x27;</span>)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>作用域和作用域链</title>
    <link href="/2020/10/21/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <url>/2020/10/21/%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><h5 id="1-什么是作用域"><a href="#1-什么是作用域" class="headerlink" title="1.什么是作用域"></a>1.什么是作用域</h5><p>定义变量的区域就是作用域。作用域是一套规则，用于确定在何处以及如何查找变量（标识符）。</p><p>作用域包括了<strong>全局作用域</strong>，<strong>函数作用域</strong>和<strong>块级作用域</strong></p><h5 id="2-全局作用域"><a href="#2-全局作用域" class="headerlink" title="2.全局作用域"></a>2.全局作用域</h5><ul><li>最外层函数和最外层函数定义外定义的变量拥有全局作用域</li><li>所有未定义直接赋值的变量自动声明为拥有全局作用域</li><li>所有window对象的属性拥有全局作用域</li></ul><h5 id="3-函数作用域"><a href="#3-函数作用域" class="headerlink" title="3.函数作用域"></a>3.函数作用域</h5><p>函数作用域指声明在函数内部的变量拥有</p><p><strong>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行</strong></p><p><strong>块语句（{}），如 if 和 switch 条件语句或 for 和 while 循环语句，不会创建新的作用域</strong></p><h5 id="4-块级作用域"><a href="#4-块级作用域" class="headerlink" title="4.块级作用域"></a>4.块级作用域</h5><p>块级作用域可通过 <strong>let</strong> 和 <strong>const</strong> 声明，所声明的变量在指定的块外的作用域无法被访问</p><ul><li>声明的变量不会提升到代码块顶部</li><li>禁止重复声明</li></ul><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><p>作用域链是一个指向变量对象的指针列表，变量对象是一个包含了执行环境中所有变量和函数的对象，作用域链的前端始终都是当前执行上下文的变量对象，末端为全局执行上下文的变量对象</p><p>当查找一个变量时，如果当前执行环境中没有找到，则沿着作用域链向后查找，直到找到全局作用域。</p><p><strong>执行上下文在调用时候确定，随时能改变；作用域在定义时候就确定，并且不会改变</strong></p><h4 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h4><ul><li>变量对象(VO)，包含变量、函数声明和函数的形参，该属性只能在全局上下文中访问</li><li>作用域链（JS采用词法作用域，也就是说变量的作用域是在定义时就决定了）</li><li>this</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>类型转换</title>
    <link href="/2020/10/20/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2020/10/20/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h4 id="转Boolean"><a href="#转Boolean" class="headerlink" title="转Boolean"></a>转Boolean</h4><p>在条件判断时，除了<code>undefined</code>，<code>null</code>，<code>false</code>，<code>NaN</code>，<code>&#39;&#39;</code>，<code>0</code>，<code>-0</code>，其他所有值都转换为<code>true</code>，包括所有对象</p><h4 id="对象转基本类型"><a href="#对象转基本类型" class="headerlink" title="对象转基本类型"></a>对象转基本类型</h4><p>对象在转基本类型时，首先会调用<code>valueOf</code>然后调用<code>toString</code>。并且这两个方法可以重写</p><h4 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h4><p>只有当加法运算时，其中一方是字符串类型，就会把另一个也转为字符串类型。其他运算只要其中一方是数字，那么另一方就转为数字。并且加法运算会触发三种类型转换：将值转换为原始值，转换为数字，转换为字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span> + <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">// &#x27;11&#x27;</span><br><span class="hljs-number">2</span> * <span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-comment">// 4</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>] + [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>] <span class="hljs-comment">// &#x27;1,22,1&#x27;</span><br><span class="hljs-comment">// [1, 2].toString() -&gt; &#x27;1,2&#x27;</span><br><span class="hljs-comment">// [2, 1].toString() -&gt; &#x27;2,1&#x27;</span><br><span class="hljs-comment">// &#x27;1,2&#x27; + &#x27;2,1&#x27; = &#x27;1,22,1&#x27;</span><br></code></pre></td></tr></table></figure><p>对于加号需要注意这个表达式 <code>&#39;a&#39; + + &#39;b&#39;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;a&#x27;</span> + + <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-comment">// -&gt; &quot;aNaN&quot;</span><br><span class="hljs-comment">// 因为 + &#x27;b&#x27; -&gt; NaN</span><br><span class="hljs-comment">// 你也许在一些代码中看到过 + &#x27;1&#x27; -&gt; 1</span><br></code></pre></td></tr></table></figure><p>####<code>==</code> 操作符</p><p>比较运算<code>x==y</code>，其中<code>x</code>和<code>y</code>是值，产生<code>true</code>或者<code>false</code>。这样的比较按如下方式进行：</p><ol><li>若<code>Type(x)</code>与<code>Type(y)</code>相同，则<ol><li>若<code>Type(x)</code>为<code>Undefined</code>，返回<code>true</code> 。</li><li>若<code>Type(x)</code>为<code>Null</code>，返回<code>true</code>。</li><li>若<code>Type(x)</code>为<code>Number</code>，则<ol><li>若<code>x</code>为<code>NaN</code>，返回<code>false</code>。</li><li>若<code>y</code>为<code>NaN</code>，返回<code>false</code>。</li><li>若<code>x</code>与<code>y</code>为相等数值，返回<code>true</code>。</li><li>若<code>x</code>为<code>+0</code>且<code>y</code>为<code>-0</code>，返回<code>true</code>。</li><li>若<code>x</code>为<code>-0</code>且<code>y</code>为<code>+0</code>，返回<code>true</code>。</li><li>返回<code>false</code>。</li></ol></li><li>若<code>Type(x)</code>为<code>String</code>，则当<code>x</code>和<code>y</code>为完全相同的字符序列（长度相等且相同字符在相同位置）时返回<code>true</code>。否则，返回<code>false</code>。</li><li>若<code>Type(x)</code>为<code>Boolean</code>当<code>x</code>和<code>y</code>为同<code>true</code>或者同为<code>false</code>时返回<code>true</code>。否则返回<code>false</code>。</li><li>当<code>x</code>和<code>y</code>为引用同一对象时返回<code>true</code>。否则，返回<code>false</code>。</li></ol></li><li>若<code>x</code>为<code>null</code>且<code>y</code>为<code>undefined</code>，返回<code>true</code>。</li><li>若<code>x</code>为<code>undefined</code>且<code>y</code>为<code>null</code>，返回<code>true</code>。</li><li>若<code>Type(x)</code>为<code>Number</code>且<code>Type(y)</code>为<code>String</code>，返回<code>comparison x == ToNumber(y)</code>的结果。</li><li>若<code>Type(x)</code>为<code>String</code>且<code>Type(y)</code>为<code>Number</code>，返回<code>ToNumber(x) == y</code>的结果。</li><li>若<code>Type(x)</code>为<code>Boolean</code>，返回比较<code>ToNumber(x) == y</code>的结果。</li><li>若<code>Type(y)</code>为<code>Boolean</code>，返回比较<code>x == ToNumber(y)</code>的结果。</li><li>若<code>Type(x)</code>为<code>String</code>或<code>Number</code>，且<code>Type(y)</code>为<code>Object</code>，返回比较<code>x == ToPrimitive(y)</code>的结果。</li><li>若<code>Type(x)</code>为<code>Object</code>，且<code>Type(y)</code>为<code>String</code>或<code>Number</code>，返回比较<code>ToPrimitive(x) == y</code>的结果</li></ol><p><code>toPrimitive</code>就是对象转基本类型</p><p>例题：<code>[] == ![] // -&gt; true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// [] 转成 true，然后取反变成 false</span><br>[] == <span class="hljs-literal">false</span><br><span class="hljs-comment">// 根据第 8 条得出</span><br>[] == <span class="hljs-title class_">ToNumber</span>(<span class="hljs-literal">false</span>)<br>[] == <span class="hljs-number">0</span><br><span class="hljs-comment">// 根据第 10 条得出</span><br><span class="hljs-title class_">ToPrimitive</span>([]) == <span class="hljs-number">0</span><br><span class="hljs-comment">// [].toString() -&gt; &#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;</span> == <span class="hljs-number">0</span><br><span class="hljs-comment">// 根据第 6 条得出</span><br><span class="hljs-number">0</span> == <span class="hljs-number">0</span> <span class="hljs-comment">// -&gt; true</span><br></code></pre></td></tr></table></figure><p><code>number</code>&gt; <code>string</code>&gt; <code>object</code>&gt;<code>boolean</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据类型</title>
    <link href="/2020/10/19/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2020/10/19/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="JS的数据类型"><a href="#JS的数据类型" class="headerlink" title="JS的数据类型"></a>JS的数据类型</h4><p><strong>最新的 ECMAScript 标准定义了 8 种数据类型:</strong></p><p>原始数据类型：<code>Undefined</code> <code>Null</code> <code>Number</code> <code>String</code>  <code>Boolean</code>  <code>Symbol</code> <code>Bigint</code></p><p>引用数据类型: <code>Object</code></p><p>除<code>Object</code>以外的所有类型都是不变的（值本身无法被改变）</p><h4 id="使用typeof操作符检测一个变量的类型"><a href="#使用typeof操作符检测一个变量的类型" class="headerlink" title="使用typeof操作符检测一个变量的类型"></a>使用<code>typeof</code>操作符检测一个变量的类型</h4><p><code>typeof</code>返回一个表示数据类型的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// number</span><br><span class="hljs-keyword">typeof</span> ‘ ’;<span class="hljs-comment">//string</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//boolean</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>; <span class="hljs-comment">//undefined</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>; <span class="hljs-comment">//object</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(); <span class="hljs-comment">// function</span><br><span class="hljs-keyword">typeof</span> [] ; <span class="hljs-comment">//object</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">//object</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(); <span class="hljs-comment">//object</span><br></code></pre></td></tr></table></figure><p>原始数据类型除了<code>null</code>引用类型处了<code>function</code></p><h4 id="使用instanceof操作符检测某个对象的具体类型"><a href="#使用instanceof操作符检测某个对象的具体类型" class="headerlink" title="使用instanceof操作符检测某个对象的具体类型"></a>使用<code>instanceof</code>操作符检测某个对象的具体类型</h4><p><code>instanceof</code>运算符用于检测构造函数的<code>prototype</code>属性是否出现在某个实例对象的原型链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//模拟代码</span><br><span class="hljs-keyword">instanceof</span> (A,B) = &#123;<br>  <span class="hljs-keyword">var</span> L = A.<span class="hljs-property">__proto__</span>;<br>  <span class="hljs-keyword">var</span> R = B.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>  <span class="hljs-keyword">if</span>(L === R)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">myInstanceof</span>(<span class="hljs-params">left, right</span>)&#123;<br>  <span class="hljs-keyword">let</span> proto = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(left);<br>  <span class="hljs-keyword">let</span> prototype = right.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!proto) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(proto === prototype) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    proto = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(proto);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">[] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>; <span class="hljs-comment">//true</span><br>[] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>; <span class="hljs-comment">//true</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>;<span class="hljs-comment">//true</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>;<span class="hljs-comment">//true</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>;<span class="hljs-comment">//true</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>;<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p><code>[].__proto__</code> –&gt; <code>Array.prototype</code> –&gt; <code>Object.prototype</code> -&gt; <code>null</code></p><h4 id="使用toString-检测对象类型"><a href="#使用toString-检测对象类型" class="headerlink" title="使用toString()检测对象类型"></a>使用<code>toString()</code>检测对象类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&#x27;&#x27;</span>) ;   <span class="hljs-comment">// [object String]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-number">1</span>) ;    <span class="hljs-comment">// [object Number]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">true</span>) ; <span class="hljs-comment">// [object Boolean]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>) ; <span class="hljs-comment">// [object Undefined]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>) ; <span class="hljs-comment">// [object Null]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>()) ; <span class="hljs-comment">// [object Function]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()) ; <span class="hljs-comment">// [object Date]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>([]) ; <span class="hljs-comment">// [object Array]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>()) ; <span class="hljs-comment">// [object RegExp]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>()) ; <span class="hljs-comment">// [object Error]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">document</span>) ; <span class="hljs-comment">// [object HTMLDocument]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">window</span>) ; <span class="hljs-comment">//[object Window]</span><br></code></pre></td></tr></table></figure><p>利用<code>toString()</code>的特性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> type = <span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) &#123;<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-title class_">Object</span>.<span class="hljs-property">propertype</span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(o)<br>   <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/object(.∗?)/</span>)[<span class="hljs-number">1</span>].<span class="hljs-title function_">toLowerCase</span>()<br>&#125;<br><span class="hljs-title function_">type</span>(&#123;&#125;); <span class="hljs-comment">// &quot;object&quot;</span><br><span class="hljs-title function_">type</span>([]); <span class="hljs-comment">// &quot;array&quot;</span><br><span class="hljs-title function_">type</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// &quot;number&quot;</span><br><span class="hljs-title function_">type</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// &quot;null&quot;</span><br><span class="hljs-title function_">type</span>(); <span class="hljs-comment">// &quot;undefined&quot;</span><br><span class="hljs-title function_">type</span>(<span class="hljs-regexp">/abcd/</span>); <span class="hljs-comment">// &quot;regex&quot;</span><br><span class="hljs-title function_">type</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()); <span class="hljs-comment">// &quot;date&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mac 关闭/恢复开机DUANG</title>
    <link href="/2020/10/12/mac-%E5%85%B3%E9%97%AD-%E6%81%A2%E5%A4%8D%E5%BC%80%E6%9C%BADUANG/"/>
    <url>/2020/10/12/mac-%E5%85%B3%E9%97%AD-%E6%81%A2%E5%A4%8D%E5%BC%80%E6%9C%BADUANG/</url>
    
    <content type="html"><![CDATA[<h4 id="macOS-Big-Sur关闭开机DUANG"><a href="#macOS-Big-Sur关闭开机DUANG" class="headerlink" title="macOS Big Sur关闭开机DUANG"></a>macOS Big Sur关闭开机<code>DUANG</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nvram StartupMute=%01<br></code></pre></td></tr></table></figure><p>如果上面命令执行后还是有声音，继续执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nvram SystemAudioVolume=<span class="hljs-string">&quot;％80&quot;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nvram SystemAudioVolume=<span class="hljs-string">&quot;％00&quot;</span><br></code></pre></td></tr></table></figure><p>如果想恢复启动音默认设置，依次执行输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nvram -d StartupMute<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nvram -d SystemAudioVolume<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>捕获async/await异常</title>
    <link href="/2020/09/21/%E6%8D%95%E8%8E%B7async-await%E5%BC%82%E5%B8%B8/"/>
    <url>/2020/09/21/%E6%8D%95%E8%8E%B7async-await%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h4 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//to.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">to</span>(<span class="hljs-params">promise</span>)&#123;<br>  <span class="hljs-keyword">return</span> promise.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> [<span class="hljs-literal">null</span>,data]<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> [err])<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> to <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./to.js&#x27;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncTask</span>(<span class="hljs-params"></span>) &#123;<br>     <span class="hljs-keyword">let</span> err, user, savedTask;<br><br>     [err, user] = <span class="hljs-keyword">await</span> <span class="hljs-title function_">to</span>(<span class="hljs-title class_">UserModel</span>.<span class="hljs-title function_">findById</span>(<span class="hljs-number">1</span>));<br>     <span class="hljs-keyword">if</span>(!user) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerError</span>(<span class="hljs-string">&#x27;No user found&#x27;</span>);<br><br>     [err, savedTask] = <span class="hljs-keyword">await</span> <span class="hljs-title function_">to</span>(<span class="hljs-title class_">TaskModel</span>(&#123;<span class="hljs-attr">userId</span>: user.<span class="hljs-property">id</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Demo Task&#x27;</span>&#125;));<br>     <span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomError</span>(<span class="hljs-string">&#x27;Error occurred while saving task&#x27;</span>);<br><br>    <span class="hljs-keyword">if</span>(user.<span class="hljs-property">notificationsEnabled</span>) &#123;<br>       <span class="hljs-keyword">const</span> [err] = <span class="hljs-keyword">await</span> <span class="hljs-title function_">to</span>(<span class="hljs-title class_">NotificationService</span>.<span class="hljs-title function_">sendNotification</span>(user.<span class="hljs-property">id</span>, <span class="hljs-string">&#x27;Task Created&#x27;</span>));  <br>       <span class="hljs-keyword">if</span> (err) <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Just log the error and continue flow&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计一个Class</title>
    <link href="/2020/07/23/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAClass/"/>
    <url>/2020/07/23/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AAClass/</url>
    
    <content type="html"><![CDATA[<h4 id="设计一个LazyMan类，实现以下功能"><a href="#设计一个LazyMan类，实现以下功能" class="headerlink" title="设计一个LazyMan类，实现以下功能"></a>设计一个LazyMan类，实现以下功能</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">LazyMan</span>(<span class="hljs-string">&#x27;Tony&#x27;</span>);<br><span class="hljs-comment">// Hi I am Tony</span><br><br><span class="hljs-title class_">LazyMan</span>(<span class="hljs-string">&#x27;Tony&#x27;</span>).<span class="hljs-title function_">sleep</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">eat</span>(<span class="hljs-string">&#x27;lunch&#x27;</span>);<br><span class="hljs-comment">// Hi I am Tony</span><br><span class="hljs-comment">// 等待了10秒...</span><br><span class="hljs-comment">// I am eating lunch</span><br><br><span class="hljs-title class_">LazyMan</span>(<span class="hljs-string">&#x27;Tony&#x27;</span>).<span class="hljs-title function_">eat</span>(<span class="hljs-string">&#x27;lunch&#x27;</span>).<span class="hljs-title function_">sleep</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">eat</span>(<span class="hljs-string">&#x27;dinner&#x27;</span>);<br><span class="hljs-comment">// Hi I am Tony</span><br><span class="hljs-comment">// I am eating lunch</span><br><span class="hljs-comment">// 等待了10秒...</span><br><span class="hljs-comment">// I am eating diner</span><br><br><span class="hljs-title class_">LazyMan</span>(<span class="hljs-string">&#x27;Tony&#x27;</span>).<span class="hljs-title function_">eat</span>(<span class="hljs-string">&#x27;lunch&#x27;</span>).<span class="hljs-title function_">eat</span>(<span class="hljs-string">&#x27;dinner&#x27;</span>).<span class="hljs-title function_">sleepFirst</span>(<span class="hljs-number">5</span>).<span class="hljs-title function_">sleep</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_">eat</span>(<span class="hljs-string">&#x27;junk food&#x27;</span>);<br><span class="hljs-comment">// Hi I am Tony</span><br><span class="hljs-comment">// 等待了5秒...</span><br><span class="hljs-comment">// I am eating lunch</span><br><span class="hljs-comment">// I am eating dinner</span><br><span class="hljs-comment">// 等待了10秒...</span><br><span class="hljs-comment">// I am eating junk food</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sleep</title>
    <link href="/2020/07/22/sleep/"/>
    <url>/2020/07/22/sleep/</url>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Promise</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sleep</span> = (<span class="hljs-params">time</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, time))<br>&#125;<br><span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">//其他操作</span><br>&#125;)<br><br><span class="hljs-comment">//Generator</span><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">sleepGenerator</span>(<span class="hljs-params">time</span>)&#123;<br><span class="hljs-keyword">yield</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve,time)<br>  &#125;)<br>&#125;<br><span class="hljs-title function_">sleepGenerator</span>(<span class="hljs-number">1000</span>).<span class="hljs-title function_">next</span>().<span class="hljs-property">value</span>.<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-comment">//其他操作</span><br>&#125;)<br><br><span class="hljs-comment">//async</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">time</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-built_in">setTimeout</span>, time)<br>&#125;<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">output</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> out = <span class="hljs-keyword">await</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-number">1000</span>);<br>  <span class="hljs-keyword">return</span> out;<br>&#125;<br><span class="hljs-title function_">output</span>();<br><br><span class="hljs-comment">//ES5</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">callback,time</span>)&#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">&#x27;function&#x27;</span>)&#123;<br>     <span class="hljs-built_in">setTimeout</span>(callback,time)<br>&#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">output</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//其他操作</span><br>&#125;<br><span class="hljs-title function_">sleep</span>(output,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重绘和回流</title>
    <link href="/2020/07/20/%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/"/>
    <url>/2020/07/20/%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h4 id="浏览器渲染机制"><a href="#浏览器渲染机制" class="headerlink" title="浏览器渲染机制"></a>浏览器渲染机制</h4><ul><li>浏览器采用流式布局模型（<code>Flow Based Layout</code>）</li><li>浏览器会把<code>HTML</code>解析成<code>DOM</code>，把<code>CSS</code>解析成<code>CSSDOM</code>，<code>DOM</code>和<code>CSSDOM</code>合并就产生了渲染树（<code>Render Tree</code>）</li><li>有了<code>Render Tree</code>，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制在页面上</li><li>由于浏览器使用流式布局，对<code>Render Tree</code>的计算通常只需要遍历一次就可以完成，但<code>table</code>及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用table布局的原因之一</li></ul><h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><p>由于节点的几何属性发生改变或者由于样式发生改变而不会影响布局的，称为重绘,例如<code>outline</code>，<code>visibility</code>,<code>color</code>，<code>background-color</code>等，重绘的代价是高昂的，因为浏览器必须验证DOM树上其他节点元素的可见性</p><ul><li><code>color</code>、<code>background</code>相关属性</li><li><code>border-radius</code>、<code>visibility</code>、<code>box-shadow</code></li></ul><h4 id="回流"><a href="#回流" class="headerlink" title="回流"></a>回流</h4><p>回流是布局或者几何属性需要改变就称为回流，回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了其他所有子元素以及DOM中紧随其后的节点、祖先节点元素的随后回流</p><ul><li>页面首次渲染</li><li>浏览器窗口大小发生变化</li><li>元素的内容发生变化</li><li>元素的尺寸或者位置发生变化</li><li>元素的字体大小发生变化</li><li>激活css伪类</li><li>查询某些属性或者调用某些方法</li><li>添加或者删除可见的DOM元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我的组建<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>错误：<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>错误的描述...<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>纠正错误<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一步<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二步<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在上面的HTML片段中，对该段落（<code>&lt;p&gt;</code>标签）回流将会引起强烈的回流，因为它是一个字节点。这也导致了祖先的回流（<code>div.error</code>和<code>body</code>-浏览器而定）。此外，<code>&lt;h5&gt;</code>和<code>&lt;ol&gt;</code>也会有简单的回流，因为其在DOM中在回流元素之后。<strong>大部门的回流会导致页面的重新渲染</strong></p><p><strong>回流比定会发生重绘，重绘不一定会引发回流</strong> </p><h4 id="浏览器优化"><a href="#浏览器优化" class="headerlink" title="浏览器优化"></a>浏览器优化</h4><p>现代浏览器大多都是通过队列机制来批量更新布局，浏览器会把修改操作放在队列中，至少一个浏览器刷新（即16.6ms）才会清空队列，但当你 <strong>获取布局信息的时候，队列中可能会影响这些属性或方法返回值的操作，即使没有，浏览器也会强制清空队列，触发回流和重绘来确保返回正确的值</strong></p><p>主要包括以下属性或方法</p><ul><li><code>offsetTop</code>、<code>offsetLeft</code>、<code>offsetWidth</code>、<code>offsetHeight</code></li><li><code>scrollTop</code>、<code>scrollLeft</code>、<code>scrollWidth</code>、<code>scrollHeight</code></li><li><code>clientTop</code>、<code>clientLeft</code>、<code>clientWidth</code>、<code>clientHeight</code></li><li><code>width</code>、<code>height</code></li><li><code>getComputedStyle()</code></li><li><code>getBoundingClientRect()</code></li></ul><p>所以，我们应该避免频繁的使用上述的属性，他们都会强制渲染刷新队列</p><h4 id="减少重绘和回流"><a href="#减少重绘和回流" class="headerlink" title="减少重绘和回流"></a>减少重绘和回流</h4><ol><li><p>CSS</p><ul><li><strong>使用 <code>transform</code> 替代 <code>top</code></strong></li><li><strong>使用 <code>visibility</code> 替代 <code>display：none</code>，因为前者只会引起重绘</strong></li><li><strong>避免使用 <code>table</code> 布局，可能很小的一个小改动会造成整个 <code>table</code> 的重新布局</strong></li><li><strong>尽可能在 <code>DOM</code> 数的末端改变 <code>class</code> 回流是不可避免的，限制回流的范围，使其影响尽可能少的节点</strong></li><li><strong>避免设置多层内联样式，<code>css</code> 选择符从右往左匹配查找，避免节点层级过多</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-tag">div</span> &gt; <span class="hljs-selector-tag">a</span> &gt; <span class="hljs-selector-tag">span</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于第一种设置样式的方式来说，浏览器只需要找到页面中所有的 <code>span</code> 标签然后设置颜色，但是对于第二种设置样式的方式来说，浏览器首先需要找到所有的 <code>span</code> 标签，然后找到 <code>span</code> 标签上的 <code>a</code> 标签，最后再去找到 <code>div</code> 标签，然后给符合这种条件的 <code>span</code> 标签设置颜色，这样的递归过程就很复杂。所以我们应该尽可能的避免写 <strong>过于具体</strong>的css选择器，然后对于 HTML 来说也尽量少的添加无意义的标签，保证 <strong>层级扁平</strong></p><ul><li><strong>将动画效果应用到 <code>position</code> 属性为 <code>absolute</code> 或 <code>fixed</code> 的元素上，避免影响其他元素的布局，这样只是一个重绘，而不会回流，同时，控制动画速度可以选择 <code>requestAnimationFrame</code></strong></li><li><strong>避免使用 <code>css</code>表达式，可能会引发回流</strong></li><li><strong>将频繁重绘或者回流的节点设置为图层，图层能过阻止该节点的渲染行为影响别的节点，例如 <code>will-change</code>、<code>video</code>、<code>iframe</code> 等标签，浏览器会自动将该节点变成图层</strong></li><li><strong>CSS3 硬件加速（GPU加速），使用css3硬件加速，可以让 <code>transform</code>、<code>opacity</code>、<code>filters</code> 这些动画不会引起回流重绘，但是对于动画的其他属性，比如 <code>background-color</code> 这些，还是会引起回流重绘，不过它还是可以提升这些动画的性能</strong></li></ul></li><li><p>JavaScript</p><ul><li><strong>避免频繁操作样式，做好一次性重写 <code>style</code> 属性，或者将样式列表定义为 <code>class</code> 并一次性更改 <code>class</code> 属性</strong></li><li><strong>避免频繁操作 <code>DOM</code> ，创建一个 <code>documentFragment</code>，在它上面应用所有 <code>DOM</code> 操作，最后再把它添加到文档中</strong></li><li><strong>避免频繁读取会引发回流&#x2F;重绘的属性，如果确实需要多次使用，就用一个变量缓存起来</strong></li><li><strong>对具有复杂动画的元素使用绝对定位，是他脱离文档，否则会引起父元素及后续元素频繁回流</strong></li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防抖和节流</title>
    <link href="/2020/07/10/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/2020/07/10/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>事件高频触发事件后n秒内函数只会执行一次，如果n秒内高频事件再次触发，则重新计算时间</p><p>每次触发事件时都取消之前的延时调用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn,wait</span>) &#123;<br>  <span class="hljs-keyword">let</span> timeout = <span class="hljs-literal">null</span>; <span class="hljs-comment">//创建一个标记用来存放定时器的返回值</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-variable language_">arguments</span>;<br>    <span class="hljs-keyword">if</span>(timeout)&#123;<br>      <span class="hljs-built_in">clearTimeout</span>(timeout); <span class="hljs-comment">// 每当用户输入的时候把前一个 setTimeout clear 掉</span><br>      timeout = <span class="hljs-literal">null</span>;<br>    &#125;<br>    timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span><br> fn.<span class="hljs-title function_">apply</span>(context, args);<br>    &#125;, wait)<br>  &#125;;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;防抖成功&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> inp = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;inp&#x27;</span>);<br>inp.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-title function_">debounce</span>(sayHi, <span class="hljs-number">300</span>)); <span class="hljs-comment">// 防抖</span><br></code></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>每次触发事件时都判断当前是否有等待执行的延时函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, wait</span>) &#123;<br><span class="hljs-keyword">let</span> timeout = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> context = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">let</span> args = <span class="hljs-variable language_">arguments</span>;<br>    <span class="hljs-keyword">if</span>(!timeout)&#123;<br>      timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        fn.<span class="hljs-title function_">apply</span>(context, args);<br>        timeout = <span class="hljs-literal">null</span>;<br>      &#125;, wait)<br>    &#125;<br>  &#125;<br>  <br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">innerWidth</span>, e.<span class="hljs-property">target</span>.<span class="hljs-property">innerHeight</span>);<br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, <span class="hljs-title function_">throttle</span>(sayHi, <span class="hljs-number">300</span>));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>压缩图片</title>
    <link href="/2020/07/06/%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/"/>
    <url>/2020/07/06/%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h2 id="图片压缩上传"><a href="#图片压缩上传" class="headerlink" title="图片压缩上传"></a>图片压缩上传</h2><h4 id="以vant为例子"><a href="#以vant为例子" class="headerlink" title="以vant为例子"></a>以<code>vant</code>为例子</h4><p>#####引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Uploader</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vant&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Uploader</span>);<br><br></code></pre></td></tr></table></figure><h5 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;van-uploader <br>v-model=<span class="hljs-string">&quot;fileList&quot;</span><br>  multiple<br> :after-read=<span class="hljs-string">&quot;afterRead&quot;</span><br>:before-read=<span class="hljs-string">&quot;beforeRead&quot;</span><br>/&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">fileList</span>: []<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">beforeRead</span>(<span class="hljs-params">file</span>) &#123;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/(gif|jpg|jpeg|png|GIF|JPG|PNG)$/</span>.<span class="hljs-title function_">test</span>(file.<span class="hljs-property">type</span>)) &#123;<br>        <span class="hljs-title class_">Toast</span>(<span class="hljs-string">&quot;请上传 jpg/png/gif 格式图片&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;,<br>    <span class="hljs-title function_">afterRead</span>(<span class="hljs-params">file</span>) &#123;<br>      <span class="hljs-comment">// 此时可以自行将文件上传至服务器</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file);<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="utils-js代码"><a href="#utils-js代码" class="headerlink" title="utils.js代码"></a><code>utils.js</code>代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> dataURLtoFile = <span class="hljs-keyword">function</span> (<span class="hljs-params">dataurl, filename</span>) &#123;<br>  <span class="hljs-comment">//将base64转换为文件</span><br>  <span class="hljs-keyword">var</span> arr = dataurl.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>), mime = arr[<span class="hljs-number">0</span>].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/:(.*?);/</span>)[<span class="hljs-number">1</span>],<br>    bstr = <span class="hljs-title function_">atob</span>(arr[<span class="hljs-number">1</span>]), n = bstr.<span class="hljs-property">length</span>, u8arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(n);<br>  <span class="hljs-keyword">while</span> (n--) &#123;<br>    u8arr[n] = bstr.<span class="hljs-title function_">charCodeAt</span>(n);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>([u8arr], filename, &#123; <span class="hljs-attr">type</span>: mime &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> compressImg = <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(file)<br>  <span class="hljs-comment">// if(/\/(?:jpeg|png)/i.test(file.file.type)&amp;&amp;file.file.size&gt;1500000) &#123;</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-keyword">let</span> maxWidth = <span class="hljs-number">1024</span>;<br>    <span class="hljs-comment">// let maxHeight = 768;</span><br>    <span class="hljs-comment">// 创建Canvas对象(画布)</span><br>    <span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>    <span class="hljs-comment">// 获取对应的CanvasRenderingContext2D对象(画笔)</span><br>    <span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)<br>    <span class="hljs-comment">// 创建新的图片对象 </span><br>    <span class="hljs-keyword">let</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>    <span class="hljs-comment">// 指定图片的DataURL(图片的base64编码数据)</span><br>    img.<span class="hljs-property">src</span> = file.<span class="hljs-property">content</span>;<br>    <span class="hljs-comment">// 监听浏览器加载图片完成，然后进行绘制</span><br>    img.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-comment">// 指定canvas画布大小，该大小为最后生成图片的大小</span><br>      <span class="hljs-keyword">let</span> originWidth = img.<span class="hljs-property">width</span>;<br>      <span class="hljs-keyword">let</span> originHeight = img.<span class="hljs-property">height</span>;<br>      canvas.<span class="hljs-property">width</span> = maxWidth;<br>      canvas.<span class="hljs-property">height</span> = (originHeight / originWidth) * maxWidth;<br>      <span class="hljs-comment">/* drawImage画布绘制的方法。(0,0)表示以Canvas画布左上角为起点，400，300是将图片按给定的像素进行缩小。*/</span><br>      <span class="hljs-comment">/* 如果不指定缩小的像素，图片将以图片原始大小进行绘制，图片像素如果大于画布将会从左上角开始按画布大小部分绘制图片，最后得到的图片就是张局部图。图片小于画布就会有黑边。*/</span><br>      context.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>)<br>      <span class="hljs-comment">// 将绘制完成的图片重新转化为base64编码，file.file.type为图片类型，0.92为默认压缩质量</span><br>      <span class="hljs-title function_">resolve</span>(canvas.<span class="hljs-title function_">toDataURL</span>(file.<span class="hljs-property">file</span>.<span class="hljs-property">type</span>, <span class="hljs-number">0.92</span>));<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reject)<br>    &#125;<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123;<br>  compressImg,<br>  dataURLtoFile<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;compressImg, dataURLtoFile&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/utils&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">afterRead</span>(<span class="hljs-params">file</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        file.<span class="hljs-property">status</span> = <span class="hljs-string">&quot;uploading&quot;</span>;<br>        file.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;上传中...&quot;</span>;<br>        <span class="hljs-keyword">let</span> base64 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">compressImg</span>(file);<br>        <span class="hljs-keyword">let</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>        <span class="hljs-comment">// formData.append(&quot;file&quot;, file.file);</span><br>        formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-title function_">dataURLtoFile</span>(base64,file.<span class="hljs-property">file</span>.<span class="hljs-property">name</span>));<br>        <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$http</span>.<span class="hljs-title function_">post</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$api</span>.<span class="hljs-property">file</span>, formData);<br>        <span class="hljs-keyword">if</span> (res) &#123;<br>          file.<span class="hljs-property">status</span> = <span class="hljs-string">&quot;done&quot;</span>;<br>          file.<span class="hljs-property">id</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">id</span>;<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>        file.<span class="hljs-property">status</span> = <span class="hljs-string">&quot;failed&quot;</span>;<br>        file.<span class="hljs-property">message</span> = <span class="hljs-string">&quot;上传失败&quot;</span>;<br>      &#125;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">fileList</span>);<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闭包</title>
    <link href="/2020/07/02/%E9%97%AD%E5%8C%85/"/>
    <url>/2020/07/02/%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包的定义很简单：函数A返回了一个函数B，并且函数B中使用了函数A的变量，函数B就称为闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">B</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>  &#125;<br>  <span class="hljs-keyword">return</span> B<br>&#125;<br></code></pre></td></tr></table></figure><p>经典面试题，循环中使用闭包解决了<code>var</code>定义函数问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">5</span>; i++)&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>  &#125;, i*<span class="hljs-number">1000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>首先因为<code>setTimeout</code>是个异步函数，所有会把循环全部执行完毕，这时候<code>i</code>就是6了，所以会输出一堆6</p><p>解决办法有两种，第一种使用闭包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>  (<span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>)&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j)<br>    &#125;,j*<span class="hljs-number">1000</span>)<br>  &#125;)(i)<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种就是使用<code>setTimeout</code>的第三个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params">j</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j)<br>  &#125;,i*<span class="hljs-number">1000</span>,i);<br>&#125;<br></code></pre></td></tr></table></figure><p>第三种就是使用<code>let</code>定义<code>i</code>了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i)<br>  &#125;,i*<span class="hljs-number">1000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>对于<code>let</code>来说，他会创建一个块级作用域，相当于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-comment">//形成块级作用域</span><br>  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span><br>  &#123;<br>    <span class="hljs-keyword">let</span> ii = i<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">timer</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ii)<br>    &#125;,i*<span class="hljs-number">1000</span>);<br>  &#125;<br>  i++<br>  &#123;<br>    <span class="hljs-keyword">let</span> ii = i<br>&#125;<br>  i++<br>  &#123;<br>    <span class="hljs-keyword">let</span> ii = i<br>  &#125;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作符</title>
    <link href="/2020/07/01/%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <url>/2020/07/01/%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h3 id="转Boolean"><a href="#转Boolean" class="headerlink" title="转Boolean"></a>转Boolean</h3><p>在条件判断时，除了 <code>undefined</code>， <code>null</code>， <code>false</code>， <code>NaN</code>， <code>&#39;&#39;</code>， <code>0</code>， <code>-0</code>，其他所有值都转为 <code>true</code>，包括所有对象</p><h3 id="操作符"><a href="#操作符" class="headerlink" title="== 操作符"></a><code>==</code> 操作符</h3><p><img src="/.com//7OVKq.png" alt="操作符"><br>这里来解析一道题目 <code>[] == ![] // -&gt; true</code> ，下面是这个表达式为何为 <code>true</code> 的步骤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">typeof</span>([]) <span class="hljs-comment">// &quot;object&quot;</span><br><span class="hljs-title function_">typeof</span>(![]) <span class="hljs-comment">// &quot;boolean&quot;</span><br><br><span class="hljs-comment">// [] 转成 true，然后取反变成 false</span><br>[] == <span class="hljs-literal">false</span><br><br><span class="hljs-comment">// 根据第7 If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).</span><br>[] == <span class="hljs-number">0</span><br><br><span class="hljs-comment">// 根据第9 If Type(x) is Object and Type(y) is either String or Number. return the result of the comparison(x) == y</span><br><span class="hljs-comment">// [].toString() -&gt; &#x27;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;</span> == <span class="hljs-number">0</span><br><br><span class="hljs-comment">// 根据第7 </span><br><span class="hljs-number">0</span> == <span class="hljs-number">0</span> <span class="hljs-comment">// =&gt; true</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>reduce</title>
    <link href="/2020/06/30/reduce/"/>
    <url>/2020/06/30/reduce/</url>
    
    <content type="html"><![CDATA[<h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> files = [<span class="hljs-string">&#x27;foo.txt &#x27;</span>,<span class="hljs-string">&#x27;.bar&#x27;</span>,<span class="hljs-string">&#x27;  &#x27;</span>,<span class="hljs-string">&#x27;baz.foo&#x27;</span>];<br><span class="hljs-keyword">let</span> filePath = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> file <span class="hljs-keyword">of</span> files) &#123;<br><span class="hljs-keyword">const</span> fileName = file.<span class="hljs-title function_">trim</span>();<br>&#125;<br><span class="hljs-comment">//1,1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对象拷贝</title>
    <link href="/2020/06/29/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2020/06/29/%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">let</span> b = a<br>a.<span class="hljs-property">age</span> = <span class="hljs-number">2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">age</span>) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>从上述例子中我们可以发现，如果给一个变量赋值一个对象，那么两者的值会是同一个引用，其中一方改变，另一方也会改变。</p><p>通常在开发中我们不希望出现这样的问题，我们可以使用深浅拷贝来解决这个问题</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>首先可以通过 <code>Object.assign</code>来解决这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, a)<br>a.<span class="hljs-property">age</span> = <span class="hljs-number">2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">age</span>) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>当然我们也可以通过展开运算符(…)来解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">let</span> b = &#123; ...a &#125;<br>a.<span class="hljs-property">age</span> = <span class="hljs-number">2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">age</span>) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>通常浅拷贝就能解决大部分问题了，但是当我们遇到如下情况就需要使用到深拷贝了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">jobs</span>: &#123;<br>    <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;FE&#x27;</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> b = &#123; ...a &#125;<br>a.<span class="hljs-property">jobs</span>.<span class="hljs-property">first</span> = <span class="hljs-string">&#x27;native&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">jobs</span>.<span class="hljs-property">first</span>) <span class="hljs-comment">// native</span><br></code></pre></td></tr></table></figure><p>浅拷贝只解决了第一层的问题，如果接下去的值中还有对象的话，那么就又回到刚开始的话题了，两者享有相同的引用。要解决这个问题，我们需要引入深拷贝</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>这个问题通常可以通过 <code>JSON.parse(JSON.stringify(object)) </code> 来解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = &#123;<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">jobs</span>: &#123;<br>    <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;FE&#x27;</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">let</span> b = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(a))<br>a.<span class="hljs-property">jobs</span>.<span class="hljs-property">first</span> = <span class="hljs-string">&#x27;native&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b.<span class="hljs-property">jobs</span>.<span class="hljs-property">first</span>) <span class="hljs-comment">// FE</span><br></code></pre></td></tr></table></figure><p>但是该方法也是有局限性的：</p><ul><li>会忽略 <code>undefined</code></li><li>会忽略 <code>symbol</code></li><li>不能序列化函数</li><li>不能解决循环引用的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj</span>)&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> obj;<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(obj);<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">RegExp</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(obj);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> obj;<br>  <span class="hljs-keyword">let</span> cloneObj = <span class="hljs-keyword">new</span> obj.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>      <span class="hljs-comment">// 实现递归拷贝</span><br>      cloneObj[key] = <span class="hljs-title function_">deepClone</span>(obj[key]);<br>&#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> cloneObj;<br>&#125;<br><br><span class="hljs-keyword">var</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">f</span>: &#123; <span class="hljs-attr">g</span>: <span class="hljs-number">1</span> &#125; &#125;,<br>  <span class="hljs-attr">c</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;;<br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-title function_">deepClone</span>(obj1);<br><span class="hljs-comment">// obj1 === obj2  false;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>技巧</title>
    <link href="/2020/06/03/%E6%8A%80%E5%B7%A7/"/>
    <url>/2020/06/03/%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="设置条件变量"><a href="#设置条件变量" class="headerlink" title="设置条件变量"></a>设置条件变量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> timezone = user.<span class="hljs-property">preferred_timezone</span> || <span class="hljs-string">&#x27;America/New_York&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="转换数组中的值"><a href="#转换数组中的值" class="headerlink" title="转换数组中的值"></a>转换数组中的值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> selected_values = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>]<br><br>selected_values = selected_values.<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Number</span>) <span class="hljs-comment">// [1, 5, 8]</span><br>selected_values = selected_values.<span class="hljs-title function_">map</span>(<span class="hljs-title class_">Boolean</span>) <span class="hljs-comment">// [true, true, true]</span><br></code></pre></td></tr></table></figure><h2 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> user = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Frank&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">23</span>,<br>    <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;M&#x27;</span>,<br>    <span class="hljs-attr">member</span>: <span class="hljs-literal">false</span><br>&#125;<br>    <br><span class="hljs-keyword">const</span> &#123; name, age, gender, member &#125; = user;<br>    <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name) <span class="hljs-comment">// Frank</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age)  <span class="hljs-comment">// 23</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gender) <span class="hljs-comment">// M</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(member) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>some/every</title>
    <link href="/2020/06/03/some-every/"/>
    <url>/2020/06/03/some-every/</url>
    
    <content type="html"><![CDATA[<h2 id="Every-和-Some"><a href="#Every-和-Some" class="headerlink" title="Every 和 Some"></a>Every 和 Some</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Every</span><br><span class="hljs-keyword">const</span> random_numbers = [<span class="hljs-number">13</span>, <span class="hljs-number">2</span>, <span class="hljs-number">37</span>, <span class="hljs-number">18</span>, <span class="hljs-number">5</span>];<br><span class="hljs-keyword">const</span> more_random_numbers = [<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">30</span>, <span class="hljs-number">22</span>];<br>    <br><span class="hljs-keyword">const</span> <span class="hljs-title function_">isPositive</span> = (<span class="hljs-params">number</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> number &gt; <span class="hljs-number">0</span>;<br>&#125;;<br><br>random_numbers.<span class="hljs-title function_">every</span>(isPositive); <span class="hljs-comment">// returns true</span><br>more_random_numbers.<span class="hljs-title function_">every</span>(isPositive); <span class="hljs-comment">// returns false</span><br><br>random_numbers.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">number</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> number &gt; <span class="hljs-number">0</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>every<code>函数返回一个布尔值。如果数组中的所有元素都通过了测试，将会返回</code>true<code>。哪怕数组中只有一个元素没有通过测试，返回的结果也是</code>false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//some</span><br><span class="hljs-keyword">const</span> random_numbers = [ <span class="hljs-number">13</span>, <span class="hljs-number">2</span>, <span class="hljs-number">37</span>, <span class="hljs-number">18</span>, <span class="hljs-number">5</span> ]<br><span class="hljs-keyword">const</span> more_random_numbers = [ <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">30</span>, <span class="hljs-number">22</span> ]<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">isPositive</span> = (<span class="hljs-params">number</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> number &gt; <span class="hljs-number">0</span><br>&#125;<br>    <br>random_numbers.<span class="hljs-title function_">some</span>(isPositive); <span class="hljs-comment">// returns true</span><br>more_random_numbers.<span class="hljs-title function_">some</span>(isPositive); <span class="hljs-comment">// returns true</span><br><br></code></pre></td></tr></table></figure><p><code>some</code> 函数测试是否至少有一个数组中的元素通过了测试。</p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>‘检查是否为空’</title>
    <link href="/2020/05/29/%E2%80%98%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E2%80%99/"/>
    <url>/2020/05/29/%E2%80%98%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E2%80%99/</url>
    
    <content type="html"><![CDATA[<h4 id="判断是否为空"><a href="#判断是否为空" class="headerlink" title="判断是否为空"></a>判断是否为空</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//javascript</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">isEmpty</span> = val =&gt; val == <span class="hljs-literal">null</span> || !(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(val) || val).<span class="hljs-property">length</span>;<br><br><span class="hljs-comment">//examples</span><br><span class="hljs-title function_">isEmpty</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">//true</span><br><span class="hljs-title function_">isEmpty</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">//true</span><br><span class="hljs-title function_">isEmpty</span>([]); <span class="hljs-comment">// true</span><br><span class="hljs-title function_">isEmpty</span>(&#123;&#125;); <span class="hljs-comment">// true</span><br><span class="hljs-title function_">isEmpty</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// true</span><br><span class="hljs-title function_">isEmpty</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]); <span class="hljs-comment">// false</span><br><span class="hljs-title function_">isEmpty</span>(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;); <span class="hljs-comment">// false</span><br><span class="hljs-title function_">isEmpty</span>(<span class="hljs-string">&#x27;text&#x27;</span>); <span class="hljs-comment">// false</span><br><span class="hljs-title function_">isEmpty</span>(<span class="hljs-number">123</span>); <span class="hljs-comment">// true - type is not considered a collection</span><br><span class="hljs-title function_">isEmpty</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">// true - type is not considered a collection</span><br></code></pre></td></tr></table></figure><h4 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//javascript</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getType</span> = v =&gt; (v===<span class="hljs-literal">undefined</span>?<span class="hljs-string">&#x27;undefined&#x27;</span>:v===<span class="hljs-literal">null</span>?<span class="hljs-string">&#x27;null&#x27;</span>:v.<span class="hljs-property">constructor</span>.<span class="hljs-property">name</span>)<br><br><span class="hljs-comment">//examples</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])) <span class="hljs-comment">// &#x27;Set&#x27;</span><br><span class="hljs-title function_">getType</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]); <span class="hljs-comment">//Array</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">//String</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-literal">undefined</span>); <span class="hljs-comment">//undefined</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">//null</span><br><span class="hljs-title function_">getType</span>(&#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;); <span class="hljs-comment">//Object</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-number">123</span>); <span class="hljs-comment">//Number</span><br><span class="hljs-title function_">getType</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">//Boolean</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>克隆对象</title>
    <link href="/2020/05/28/%E5%85%8B%E9%9A%86%E5%AF%B9%E8%B1%A1/"/>
    <url>/2020/05/28/%E5%85%8B%E9%9A%86%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="对象深浅拷贝"><a href="#对象深浅拷贝" class="headerlink" title="对象深浅拷贝"></a>对象深浅拷贝</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 方式一</span><br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;<br><span class="hljs-keyword">let</span> clone = &#123; ...obj &#125;;<br>clone.<span class="hljs-property">b</span> = <span class="hljs-number">4</span>;<br><span class="hljs-comment">// obj = &#123; a: 1, b: 2&#125;, clone = &#123; a: 1, b: 4 &#125;</span><br><br><br><span class="hljs-comment">// 方式二</span><br><span class="hljs-keyword">let</span> otherClone = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, obj);<br>otherClone.<span class="hljs-property">b</span> = <span class="hljs-number">6</span>;<br>clone.<span class="hljs-property">b</span> = <span class="hljs-number">4</span>;<br><span class="hljs-comment">// obj = &#123; a: 1, b: 2&#125;, otherClone = &#123; a: 1, b: 6 &#125;</span><br><br><br><span class="hljs-comment">//方式三</span><br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">2</span> &#125; &#125;;<br><span class="hljs-keyword">let</span> clone = <span class="hljs-title class_">JSON</span>.<span class="hljs-property">parseJSON</span>.<span class="hljs-title function_">stringify</span>(obj));<br>clone.<span class="hljs-property">b</span>.<span class="hljs-property">c</span> = <span class="hljs-number">4</span>;<br><span class="hljs-comment">// obj = &#123; a: 1, b: &#123; c: 2 &#125;&#125;, clone = &#123; a: 1, b: &#123; c: 4 &#125; &#125;</span><br><br><span class="hljs-comment">//lodash的_.cloneDeep</span><br><span class="hljs-keyword">var</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">f</span>: &#123; <span class="hljs-attr">g</span>: <span class="hljs-number">1</span> &#125; &#125;,<br>  <span class="hljs-attr">c</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;;<br><span class="hljs-keyword">var</span> obj2 = _.<span class="hljs-title function_">clone</span>(obj1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">b</span>.<span class="hljs-property">f</span> === obj2.<span class="hljs-property">b</span>.<span class="hljs-property">f</span>);<span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="深冻结"><a href="#深冻结" class="headerlink" title="深冻结"></a>深冻结</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//深冻结</span><br><span class="hljs-keyword">const</span> myObj = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>  <span class="hljs-attr">c</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>],<br>  <span class="hljs-attr">d</span>: &#123; <span class="hljs-attr">e</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">f</span>: <span class="hljs-number">2</span> &#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">deepFreeze</span> = obj =&gt; &#123;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">prop</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (obj[prop] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; !<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(obj[prop])) <span class="hljs-title function_">deepFreeze</span>(v[prop]);<br>  &#125;);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj);<br>&#125;;<br><span class="hljs-title function_">deepFreeze</span>(myObj);<br><br>myObj.<span class="hljs-property">a</span> = <span class="hljs-number">10</span>;<br>myObj.<span class="hljs-property">b</span> = <span class="hljs-string">&#x27;hi&#x27;</span>;<br>myObj.<span class="hljs-property">c</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">4</span>;<br>myObj.<span class="hljs-property">d</span>.<span class="hljs-property">e</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">myObj = &#123;</span><br><span class="hljs-comment">  a: 1,</span><br><span class="hljs-comment">  b: &#x27;hello&#x27;,</span><br><span class="hljs-comment">  c: [0, 1, 2],</span><br><span class="hljs-comment">  d: &#123; e: 1, f: 2 &#125;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">obj</span>)&#123;<br>  <span class="hljs-keyword">if</span> (obj === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> obj;<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Date</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(obj);<br>  <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">RegExp</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(obj);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> obj;<br>  <span class="hljs-keyword">let</span> cloneObj = <span class="hljs-keyword">new</span> obj.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>      <span class="hljs-comment">// 实现递归拷贝</span><br>      cloneObj[key] = <span class="hljs-title function_">deepClone</span>(obj[key]);<br>&#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> cloneObj;<br>&#125;<br><br><span class="hljs-keyword">var</span> obj1 = &#123;<br>  <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">b</span>: &#123; <span class="hljs-attr">f</span>: &#123; <span class="hljs-attr">g</span>: <span class="hljs-number">1</span> &#125; &#125;,<br>  <span class="hljs-attr">c</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>&#125;;<br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-title function_">deepClone</span>(obj1);<br><span class="hljs-comment">// obj1 === obj2  false;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>base64图片转file文件</title>
    <link href="/2020/05/21/base64%E5%9B%BE%E7%89%87%E8%BD%ACfile%E6%96%87%E4%BB%B6/"/>
    <url>/2020/05/21/base64%E5%9B%BE%E7%89%87%E8%BD%ACfile%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h4 id="通过new-File-将base64转换成file文件-存在兼容性问题"><a href="#通过new-File-将base64转换成file文件-存在兼容性问题" class="headerlink" title="通过new File()将base64转换成file文件(存在兼容性问题)"></a>通过new File()将base64转换成file文件(存在兼容性问题)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//将base64转换为文件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dataURLtoFile</span>(<span class="hljs-params">dataurl, filename</span>) &#123; <br><span class="hljs-keyword">var</span> arr = dataurl.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>),<br>mime = arr[<span class="hljs-number">0</span>].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/:(.*?);/</span>)[<span class="hljs-number">1</span>],<br>  bstr = <span class="hljs-title function_">atob</span>(arr[<span class="hljs-number">1</span>]),<br>  n = bstr.<span class="hljs-property">length</span>,<br>  u8arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(n);<br><span class="hljs-keyword">while</span> (n--) &#123;<br>u8arr[n] = bstr.<span class="hljs-title function_">charCodeAt</span>(n);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>([u8arr], filename, &#123; <span class="hljs-attr">type</span>: mime &#125;);<br>&#125;<br><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">var</span> file = <span class="hljs-title function_">dataURLtoFile</span>(base64Data, imgName);<br></code></pre></td></tr></table></figure><h4 id="先将base64转换成blob，再将blob转换成file文件"><a href="#先将base64转换成blob，再将blob转换成file文件" class="headerlink" title="先将base64转换成blob，再将blob转换成file文件"></a>先将base64转换成blob，再将blob转换成file文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//将base64转换为blob</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">dataURLtoBlob</span>(<span class="hljs-params">dataurl</span>) &#123; <br><span class="hljs-keyword">var</span> arr = dataurl.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;,&#x27;</span>),<br>mime = arr[<span class="hljs-number">0</span>].<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/:(.*?);/</span>)[<span class="hljs-number">1</span>],<br>  bstr = <span class="hljs-title function_">atob</span>(arr[<span class="hljs-number">1</span>]),<br>      n = bstr.<span class="hljs-property">length</span>,<br>      u8arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(n);<br>  <span class="hljs-keyword">while</span> (n--) &#123;<br>      u8arr[n] = bstr.<span class="hljs-title function_">charCodeAt</span>(n);<br>  &#125;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([u8arr], &#123; <span class="hljs-attr">type</span>: mime &#125;);<br>&#125;<br><span class="hljs-comment">//将blob转换为file</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">blobToFile</span>(<span class="hljs-params">theBlob, fileName</span>)&#123;<br>theBlob.<span class="hljs-property">lastModifiedDate</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  theBlob.<span class="hljs-property">name</span> = fileName;<br>  <span class="hljs-keyword">return</span> theBlob;<br>&#125;<br><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">var</span> blob = <span class="hljs-title function_">dataURLtoBlob</span>(base64Data);<br><span class="hljs-keyword">var</span> file = <span class="hljs-title function_">blobToFile</span>(blob, imgName);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>splice</title>
    <link href="/2020/05/20/splice/"/>
    <url>/2020/05/20/splice/</url>
    
    <content type="html"><![CDATA[<p><strong><code>splice()</code></strong> 方法通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组</p><h2 id="使用JavaScript-Array的splice-方法删除元素"><a href="#使用JavaScript-Array的splice-方法删除元素" class="headerlink" title="使用JavaScript Array的splice()方法删除元素"></a>使用JavaScript Array的<code>splice()</code>方法删除元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> scores = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-keyword">let</span> deletedScores = scores.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(scores); <br><span class="hljs-comment">//  [4, 5]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(deletedScores); <br><span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.javascripttutorial.net/wp-content/uploads/2016/08/JavaScript-Array-Splice-Delete-Example.png" alt="图解"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">splice</span>(position,<span class="hljs-number">0</span>,new_element_1,new_element_2,...);<br></code></pre></td></tr></table></figure><ul><li>该<code>position</code>参数指定要在其中插入新元素的数组中的起始位置。</li><li>第二个参数为零（0），指示该<code>splice()</code>方法不要删除任何元素。</li><li>第三个自变量，第四个自变量等是插入到数组中的新元素</li></ul><h2 id="使用JavaScript-Array的splice-方法插入元素"><a href="#使用JavaScript-Array的splice-方法插入元素" class="headerlink" title="使用JavaScript Array的splice()方法插入元素"></a>使用JavaScript Array的<code>splice()</code>方法插入元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>];<br>colors.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;purple&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(colors); <br><span class="hljs-comment">// [&quot;red&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;blue&quot;]</span><br><br>colors.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;pink&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(colors); <br><span class="hljs-comment">// [&quot;red&quot;, &quot;yellow&quot;, &quot;pink&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;blue&quot;]</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.javascripttutorial.net/wp-content/uploads/2016/08/JavaScript-Array-Splice-Insert-Example.png" alt="图解"></p><h2 id="使用JavaScript-Array的splice-方法替换元素"><a href="#使用JavaScript-Array的splice-方法替换元素" class="headerlink" title="使用JavaScript Array的splice()方法替换元素"></a>使用JavaScript Array的<code>splice()</code>方法替换元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> languages = [<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;C++&#x27;</span>, <span class="hljs-string">&#x27;Java&#x27;</span>, <span class="hljs-string">&#x27;JavaScript&#x27;</span>];<br>languages.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Python&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(languages); <br><span class="hljs-comment">// [&quot;C&quot;, &quot;Python&quot;, &quot;Java&quot;, &quot;JavaScript&quot;]</span><br><br>languages.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;C#&#x27;</span>,<span class="hljs-string">&#x27;Swift&#x27;</span>,<span class="hljs-string">&#x27;Go&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(languages); <br><span class="hljs-comment">// [&quot;C&quot;, &quot;Python&quot;, &quot;C#&quot;, &quot;Swift&quot;, &quot;Go&quot;, &quot;JavaScript&quot;]</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.javascripttutorial.net/wp-content/uploads/2016/08/JavaScript-Array-Splice-Replace-Example.png" alt="图解"></p>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>some</title>
    <link href="/2020/05/19/some/"/>
    <url>/2020/05/19/some/</url>
    
    <content type="html"><![CDATA[<h5 id="some-方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值"><a href="#some-方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值" class="headerlink" title="some() 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值"></a><strong>some()</strong> 方法测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值</h5><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> marks = [ <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span> ];<br></code></pre></td></tr></table></figure><p>使用普通的for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> marks = [ <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span> ];<br><span class="hljs-keyword">let</span> lessThanFive = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index=<span class="hljs-number">0</span>;index&lt;marks.<span class="hljs-property">length</span>;index++)&#123;<br>  <span class="hljs-keyword">if</span>(marks[index]&lt;<span class="hljs-number">5</span>)&#123;<br>    lessThanFive = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">break</span>;<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lessThanFive);<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>使用some</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> marks = [ <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span> ];<br>lessThanFive = marks.<span class="hljs-title function_">some</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>  <span class="hljs-keyword">return</span> e &lt; <span class="hljs-number">5</span>;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lessThanFive);<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>or</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> marks = [ <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span> ];<br><span class="hljs-keyword">let</span> lessThanFive = marks.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e &lt; <span class="hljs-number">5</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(lessThanFive);<br></code></pre></td></tr></table></figure><h3 id="检查数组中是否存在元素"><a href="#检查数组中是否存在元素" class="headerlink" title="检查数组中是否存在元素"></a>检查数组中是否存在元素</h3><p>以下<code>exists()</code>函数使用该<code>some()</code>方法检查数组中是否存在值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">exists</span>(<span class="hljs-params">value, array</span>)&#123;<br>  <span class="hljs-keyword">return</span> array.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">e</span>=&gt;</span>e===value);<br>&#125;<br><span class="hljs-keyword">let</span> marks = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">exists</span>(<span class="hljs-number">4</span>, marks));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">exists</span>(<span class="hljs-number">11</span>, marks));<br><span class="hljs-comment">//true</span><br><span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><h3 id="检查数组中是否有一个元素在范围内"><a href="#检查数组中是否有一个元素在范围内" class="headerlink" title="检查数组中是否有一个元素在范围内"></a>检查数组中是否有一个元素在范围内</h3><p>下面的示例演示如何检查<code>marks</code>数组中的任何数字是否在（8，10）范围内：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> marks = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">const</span> range = &#123;<br>  <span class="hljs-attr">min</span>: <span class="hljs-number">8</span>,<br>  <span class="hljs-attr">max</span>: <span class="hljs-number">10</span><br>&#125;;<br><span class="hljs-keyword">let</span> result = marks.<span class="hljs-title function_">some</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>  <span class="hljs-keyword">return</span> e &gt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">min</span> &amp;&amp; e&lt;= <span class="hljs-variable language_">this</span>.<span class="hljs-property">max</span><br>&#125;,range);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="警告：空数组"><a href="#警告：空数组" class="headerlink" title="警告：空数组"></a>警告：空数组</h2><p>如果<code>some()</code>在空数组上调用该方法，则无论任何条件如何，结果始终是<code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">let</span> result = [].<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">e</span>=&gt;</span>e&gt;<span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><span class="hljs-comment">//false</span><br><br>result = [].<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e &lt;= <span class="hljs-number">0</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css插件</title>
    <link href="/2020/05/14/css%E5%8F%AF%E9%80%89%E6%8C%89%E9%92%AE/"/>
    <url>/2020/05/14/css%E5%8F%AF%E9%80%89%E6%8C%89%E9%92%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="可选按钮"><a href="#可选按钮" class="headerlink" title="可选按钮"></a>可选按钮</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div id=&quot;app&quot;&gt;<br>  &lt;div&gt;<br>    &lt;span class=&quot;label&quot; @click=&quot;fn1&quot;&gt;<br>      &lt;i v-show=&quot;l1&quot; class=&quot;regular&quot;&gt;&lt;/i&gt;<br>    &lt;/span&gt;<br>    &lt;div&gt;<br>    &lt;span class=&quot;label&quot; @click=&quot;fn2&quot;&gt;<br>      &lt;i v-show=&quot;l2&quot; class=&quot;regular&quot;&gt;&lt;/i&gt;<br>    &lt;/span&gt;<br>  &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">l1</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">l2</span>: <span class="hljs-literal">true</span><br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">l1</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">l1</span><br>    &#125;,<br>    <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">l2</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">l2</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#20262E</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">font-family</span>: Helvetica;<br>&#125;<br><br><span class="hljs-selector-id">#app</span> &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.2s</span>;<br>&#125;<br><br><span class="hljs-selector-class">.label</span> &#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#32aeff</span>;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">16px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>&#125;<br><span class="hljs-selector-class">.label</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;\00a0&quot;</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border-top-width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border-right-width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>;<br>  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">50deg</span>);<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">3px</span>;<br>&#125;<br><span class="hljs-selector-class">.label</span> <span class="hljs-selector-class">.regular</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>, -<span class="hljs-number">50%</span>);<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#32aeff</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过控制 i.regular 显示隐藏来实现选择与放弃</p><p><a href="https://jsfiddle.net/fire_flower/7e0g4jqn/16/">在线运行</a></p><h4 id="箭头符号"><a href="#箭头符号" class="headerlink" title="箭头符号"></a>箭头符号</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.icon_right</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">border</span>: solid <span class="hljs-number">#888888</span>;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">45deg</span>);<br>  -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">45deg</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><a href>在线运行</a></p><h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取指定参数</title>
    <link href="/2020/05/13/%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%8F%82%E6%95%B0/"/>
    <url>/2020/05/13/%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="获取url-指定参数"><a href="#获取url-指定参数" class="headerlink" title="获取url 指定参数"></a>获取url 指定参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getURLParameters</span> = url =&gt;<br>    (url.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/([^?=&amp;]+)(=([^&amp;]*))/g</span>) || []).<span class="hljs-title function_">reduce</span>(<br>        <span class="hljs-function">(<span class="hljs-params">a, v</span>) =&gt;</span> ((a[v.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, v.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;=&#x27;</span>))] = v.<span class="hljs-title function_">slice</span>(v.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;=&#x27;</span>) + <span class="hljs-number">1</span>)), a), &#123;&#125;<br>    );<br><br><span class="hljs-comment">//EXAMPLES</span><br><span class="hljs-title function_">getURLParameters</span>(<span class="hljs-string">&#x27;http://url.com/page?name=Adam&amp;surname=Smith&#x27;</span>); <span class="hljs-comment">// &#123;name: &#x27;Adam&#x27;, surname: &#x27;Smith&#x27;&#125;</span><br><span class="hljs-title function_">getURLParameters</span>(<span class="hljs-string">&#x27;google.com&#x27;</span>); <span class="hljs-comment">// &#123;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUrlParam</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;(^|&amp;)&#x27;</span> + name + <span class="hljs-string">&#x27;=([^&amp;]*)(&amp;|$)&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>);<br>    <span class="hljs-keyword">var</span> param = <span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>.<span class="hljs-title function_">substr</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">match</span>(reg);<br>    <span class="hljs-keyword">if</span> (param !== <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(param[<span class="hljs-number">2</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    &#125;<br>  &#125;<br><span class="hljs-comment">// getUrlParam(&#x27;token&#x27;)</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> token = <span class="hljs-variable language_">this</span>.<span class="hljs-property">$router</span>.<span class="hljs-property">query</span>.<span class="hljs-property">token</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遍历</title>
    <link href="/2020/05/12/%E9%81%8D%E5%8E%86/"/>
    <url>/2020/05/12/%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//例子</span><br><span class="hljs-keyword">let</span> arr1 = [&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhang&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;,&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;li&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">19</span><br>&#125;]<br>arr1.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span> item.<span class="hljs-property">age</span> = item.<span class="hljs-property">age</span>+<span class="hljs-number">10</span>)<br><span class="hljs-comment">// [&#123;naem:&#x27;zhang&#x27;,age:20&#125;,&#123;name:&#x27;li&#x27;,age:29&#125;]</span><br><br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>arr2.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item = item*<span class="hljs-number">2</span>)<br><span class="hljs-comment">//arr2 = [1,2,3]</span><br><br>[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>].<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item))<br>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span> item&gt;<span class="hljs-number">2</span>)<br><span class="hljs-comment">//Uncaught TypeError: Cannot read property &#x27;filter&#x27; of undefined</span><br></code></pre></td></tr></table></figure><ul><li>当数组中的元素是值类型，forEach不会改变数组；当数组是引用类型，则会改变数组</li><li>不支持链式操作</li></ul><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//例子</span><br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">let</span> arr2 = arr1.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item*<span class="hljs-number">2</span>)<br><span class="hljs-comment">// arr1=[1,2,3] arr2=[2,4,6]</span><br><br><span class="hljs-keyword">let</span> newArr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123; <span class="hljs-keyword">if</span>(item &gt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> item &#125;)<br><span class="hljs-comment">// =&gt; [undefined, undefined, undefined, 4, 5]</span><br></code></pre></td></tr></table></figure><ul><li>map会创建新的数组。</li><li>map 函数是对每个元素都执行相应的回调，所以必须使用return，不建议用于处理过滤</li></ul><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//例子</span><br><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>].<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item&gt;<span class="hljs-number">3</span>)<br><span class="hljs-comment">// arr1=[4,5]</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见css</title>
    <link href="/2020/05/11/%E5%B8%B8%E8%A7%81css/"/>
    <url>/2020/05/11/%E5%B8%B8%E8%A7%81css/</url>
    
    <content type="html"><![CDATA[<h4 id="改变输入框内提示文字颜色"><a href="#改变输入框内提示文字颜色" class="headerlink" title="改变输入框内提示文字颜色"></a>改变输入框内提示文字颜色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css">::-webkit-input-placeholder&#123; <span class="hljs-comment">/* WebKit browsers */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br>:-moz-placeholder&#123; <span class="hljs-comment">/* Mozilla Firefox 4 to 18 */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br>::-moz-placeholder&#123; <span class="hljs-comment">/* Mozilla Firefox 19+ */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br>:-ms-input-placeholder&#123; <span class="hljs-comment">/* Internet Explorer 10+ */</span><br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#999</span>;<br>&#125;<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span>::-webkit-input-placeholder&#123;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-number">#999</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多行省略"><a href="#多行省略" class="headerlink" title="多行省略"></a>多行省略</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.ellipsis</span>&#123;<br>  <span class="hljs-attribute">display</span>: box <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">display</span>: -webkit-box <span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">overflow</span>: hidden;<br>  <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>  -webkit-box-orient: vertical;<br>  -webkit-line-clamp: <span class="hljs-number">4</span>;<span class="hljs-comment">/*第几行出现省略号*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="移动端html标签几个体验优化"><a href="#移动端html标签几个体验优化" class="headerlink" title="移动端html标签几个体验优化"></a>移动端html标签几个体验优化</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;<br><br><span class="hljs-attribute">overflow</span>: hidden;<span class="hljs-comment">/*手机上写overflow-x:hidden;会有兼容性问题，如果子级如果是绝对定位有运动到屏幕外的话ios7系统会出现留白*/</span><br><br>-webkit-<span class="hljs-attribute">overflow</span>-scrolling:touch;<span class="hljs-comment">/*流畅滚动,ios7下会有滑一下滑不动的情况，所以需要写上*/</span><br><br><span class="hljs-attribute">position</span>:realtive;<span class="hljs-comment">/*直接子级如果是绝对定位有运动到屏幕外的话，会出现留白*/</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断是否在时间段内</title>
    <link href="/2020/04/22/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%9C%A8%E6%97%B6%E9%97%B4%E6%AE%B5%E5%86%85/"/>
    <url>/2020/04/22/%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%9C%A8%E6%97%B6%E9%97%B4%E6%AE%B5%E5%86%85/</url>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> timeRange = <span class="hljs-keyword">function</span>(<span class="hljs-params">beginTime, endTime, nowTime</span>)&#123;<br>  <span class="hljs-keyword">var</span> strb = beginTime.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>);<br>  <span class="hljs-keyword">if</span>(strb.<span class="hljs-property">length</span> != <span class="hljs-number">2</span>)&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">var</span> stre = endTime.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>);<br>  <span class="hljs-keyword">if</span>(stre.<span class="hljs-property">length</span> != <span class="hljs-number">2</span>)&#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">var</span> strn = nowTime.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>);<br>    <span class="hljs-keyword">if</span> (stre.<span class="hljs-property">length</span> != <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  <span class="hljs-keyword">var</span> e = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  <span class="hljs-keyword">var</span> n = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>  b.<span class="hljs-title function_">setHours</span>(strb[<span class="hljs-number">0</span>]);<br>  b.<span class="hljs-title function_">setMinutes</span>(strb[<span class="hljs-number">1</span>]);<br>  e.<span class="hljs-title function_">setHours</span>(stre[<span class="hljs-number">0</span>]);<br>  e.<span class="hljs-title function_">setMinutes</span>(stre[<span class="hljs-number">1</span>]);<br>  n.<span class="hljs-title function_">setHours</span>(strn[<span class="hljs-number">0</span>]);<br>  n.<span class="hljs-title function_">setMinutes</span>(strn[<span class="hljs-number">1</span>]);<br>  <span class="hljs-keyword">if</span> (n.<span class="hljs-title function_">getTime</span>() - b.<span class="hljs-title function_">getTime</span>() &gt; <span class="hljs-number">0</span> &amp;&amp; n.<span class="hljs-title function_">getTime</span>() - e.<span class="hljs-title function_">getTime</span>() &lt; <span class="hljs-number">0</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>css loading</title>
    <link href="/2020/04/17/css-loading/"/>
    <url>/2020/04/17/css-loading/</url>
    
    <content type="html"><![CDATA[<h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;donut&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.donut</span>&#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">4px</span> solid <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);<br>  <span class="hljs-attribute">border-left-color</span>: <span class="hljs-number">#7983ff</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">animation</span>: donut-spin <span class="hljs-number">1.2s</span> linear infinite;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> donut-spin &#123;<br>  <span class="hljs-number">0%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>  &#125;<br>  <span class="hljs-number">100%</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">360deg</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://jsfiddle.net/fire_flower/0vnfL4eo/">在线运行</a></p><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;mask&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;bouncing-loader&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.mask</span>&#123;<br>  <span class="hljs-attribute">position</span>: fixed;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.25</span>);<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9999</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">align-items</span>: center;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><span class="hljs-selector-class">.bouncing-loader</span>&#123;<br><span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.bouncing-loader</span> &gt; <span class="hljs-selector-tag">div</span> &#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1rem</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#8385aa</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">3rem</span> .<span class="hljs-number">2rem</span>;<br>  <span class="hljs-attribute">animation</span>: bouncing-loader <span class="hljs-number">0.6s</span> infinite alternate;<br>&#125;<br><br><span class="hljs-selector-class">.bouncing-loader</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;<br><span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.2s</span>;<br>&#125;<br><span class="hljs-selector-class">.bouncing-loader</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>)&#123;<br><span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0.4s</span>;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> bouncing-loader&#123;<br><span class="hljs-selector-tag">to</span> &#123;<br><span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.1</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1rem</span>, <span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://jsfiddle.net/fire_flower/5wo6maup/">在线运行</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成随机字符串</title>
    <link href="/2020/04/15/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2020/04/15/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h4 id="原生生成随机字符串"><a href="#原生生成随机字符串" class="headerlink" title="原生生成随机字符串"></a>原生生成随机字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>().<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>).<span class="hljs-title function_">slice</span>(-<span class="hljs-number">8</span>)<br><span class="hljs-comment">// 36进制包含的字符为 0-9，a-z</span><br><span class="hljs-comment">// 10进制包含的字符为为 0-9</span><br><span class="hljs-comment">// 16进制包含的字符为 0-9，a-f</span><br></code></pre></td></tr></table></figure><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li><p>只能生成有 0-9、a-z字符组成的字符串</p></li><li><p>由于 <code>Math.random()</code>生成的18位小数，可能无法填充36位，最后几个字符串，只能在指定的几个字符中选择。导致随机性降低</p></li><li><p>某些情况下会返回空值。例如，当随机数为 0, 0.5, 0.25, 0.125…时，返回为空值</p></li></ul><h4 id="指定字符集"><a href="#指定字符集" class="headerlink" title="指定字符集"></a>指定字符集</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">randomString</span>(<span class="hljs-params">length, chars</span>) &#123;<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = length; i &gt; <span class="hljs-number">0</span>; --i) result += chars[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * chars.<span class="hljs-property">length</span>)];<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-keyword">var</span> rString = <span class="hljs-title function_">randomString</span>(<span class="hljs-number">32</span>, <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="使用工具类"><a href="#使用工具类" class="headerlink" title="使用工具类"></a>使用工具类</h4><p><font color="#ff502c">crypto</font></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function"><span class="hljs-params">len</span> =&gt;</span> &#123;<br>        <span class="hljs-comment">// isFinite 判断是否为有限数值</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(len)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Expected a finite number&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(len / <span class="hljs-number">2</span>)).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, len);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网站变灰</title>
    <link href="/2020/04/04/%E7%BD%91%E7%AB%99%E5%8F%98%E7%81%B0/"/>
    <url>/2020/04/04/%E7%BD%91%E7%AB%99%E5%8F%98%E7%81%B0/</url>
    
    <content type="html"><![CDATA[<p>可以看到今天很多APP图标，网站内容都变成了灰色调。</p><h4 id="主要实现"><a href="#主要实现" class="headerlink" title="主要实现"></a>主要实现</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span><span class="hljs-selector-class">.gray</span>&#123;<br>  webkit-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(.<span class="hljs-number">95</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>其他网站的兼容样式 CSDN</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span> &#123;<br>    -webkit-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>    -moz-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>    -ms-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>    -o-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>    <span class="hljs-attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="hljs-built_in">BasicImage</span>(grayscale=<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">引用 MDN https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter</a></p><h5 id="官方介绍内容如下"><a href="#官方介绍内容如下" class="headerlink" title="官方介绍内容如下"></a>官方介绍内容如下</h5><p><strong><code>filter</code></strong> CSS 属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像，背景和边框的渲染</p><h5 id="使用用例"><a href="#使用用例" class="headerlink" title="使用用例"></a>使用用例</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* URL to SVG filter */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;filters.svg#filter-id&quot;</span>);<br><br><span class="hljs-comment">/* &lt;filter-function&gt; values */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">brightness</span>(<span class="hljs-number">0.4</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">contrast</span>(<span class="hljs-number">200%</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">16px</span> <span class="hljs-number">16px</span> <span class="hljs-number">20px</span> blue);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">50%</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">hue-rotate</span>(<span class="hljs-number">90deg</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">invert</span>(<span class="hljs-number">75%</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">opacity</span>(<span class="hljs-number">25%</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">saturate</span>(<span class="hljs-number">30%</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">sepia</span>(<span class="hljs-number">60%</span>);<br><br><span class="hljs-comment">/* Multiple filters */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">contrast</span>(<span class="hljs-number">175%</span>) <span class="hljs-built_in">brightness</span>(<span class="hljs-number">3%</span>);<br><br><span class="hljs-comment">/* Global values */</span><br><span class="hljs-attribute">filter</span>: inherit;<br><span class="hljs-attribute">filter</span>: initial;<br><span class="hljs-attribute">filter</span>: unset;<br></code></pre></td></tr></table></figure><h5 id="使用-blur-设置高斯模糊"><a href="#使用-blur-设置高斯模糊" class="headerlink" title="使用 blur 设置高斯模糊"></a>使用 blur 设置高斯模糊</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(radius)<br></code></pre></td></tr></table></figure><p>给图像设置高斯模糊。radius 一值设定高斯函数的标准差，或者是屏幕上以多少像素融在一起，所以值越大越模糊；如果没有设定值，则默认是 0；这个参数可设置绝对像素值，但不接受百分比值</p><h5 id="使用-blur-设置灰色调"><a href="#使用-blur-设置灰色调" class="headerlink" title="使用 blur 设置灰色调"></a>使用 blur 设置灰色调</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(percent)<br></code></pre></td></tr></table></figure><p>将图像转换为灰度图像。值定义转换的比例。percent 值为 100% 则完全转为灰度图像，值为 0% 图像无变化。值在 0% 到 100% 之间，则是效果的线性乘子。若未设置，值默认是 0。另外除了传递百分比，还可以传递浮点数，效果是一样的</p><p>使用及兼容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">//在想要置灰的节点添加 gary 这个类即可<br><span class="hljs-selector-class">.gray</span> &#123;<br>    -webkit-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>    -moz-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>    -ms-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>    -o-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>    <span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">100%</span>);<br>    <span class="hljs-attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="hljs-built_in">BasicImage</span>(grayscale=<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.4新冠肺炎疫哀悼</title>
    <link href="/2020/04/03/4-4%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E%E7%96%AB%E5%93%80%E6%82%BC/"/>
    <url>/2020/04/03/4-4%E6%96%B0%E5%86%A0%E8%82%BA%E7%82%8E%E7%96%AB%E5%93%80%E6%82%BC/</url>
    
    <content type="html"><![CDATA[<h4 id="公告："><a href="#公告：" class="headerlink" title="公告："></a>公告：</h4><p>为深切哀悼在抗击新冠肺炎斗争中的牺牲烈士和逝世同胞，4月4日休息一日。</p><p>愿逝者安息，愿生者奋发，愿祖国昌盛。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用小知识</title>
    <link href="/2020/04/01/%E5%B8%B8%E7%94%A8%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/04/01/%E5%B8%B8%E7%94%A8%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h4 id="css禁用鼠标事件"><a href="#css禁用鼠标事件" class="headerlink" title="css禁用鼠标事件"></a>css禁用鼠标事件</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.disabled</span>&#123;<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>  <span class="hljs-attribute">cursor</span>: default;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0.6</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="条纹网格"><a href="#条纹网格" class="headerlink" title="条纹网格"></a>条纹网格</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.nth-child(even/odd)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.row</span><span class="hljs-selector-pseudo">:nth-child</span>(odd)&#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">2.nth-of-type(odd)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.row</span><span class="hljs-selector-pseudo">:nth-of-type</span>(odd)&#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#eee</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">3.渐变实现linear-gradient<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.stripe-bg</span>&#123;<br>  <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5em</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5em</span>;<br>  <span class="hljs-attribute">background</span>: beige;<br>  <span class="hljs-attribute">background-size</span>: auto <span class="hljs-number">3em</span>;<br>  <span class="hljs-attribute">background-origin</span>: content-box;<br>  <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">2</span>) <span class="hljs-number">50%</span>, transparent <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="css禁止用户选择"><a href="#css禁止用户选择" class="headerlink" title="css禁止用户选择"></a>css禁止用户选择</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>&#123;<br>  user-select: none;<br>  -webkit-touch-callout: none;<br>-webkit-user-select: none;<br>-khtml-user-select: none;<br>-moz-user-select: none;<br>-ms-user-select: none;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><ul><li>indexOf 实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;1&#x27;</span>];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">array</span>)&#123;<br>  <span class="hljs-keyword">var</span> res = [];<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>, len = array.<span class="hljs-property">length</span>; i&lt;len; i++)&#123;<br>    <span class="hljs-keyword">var</span> current = array[i];<br>    <span class="hljs-keyword">if</span>(res.<span class="hljs-title function_">indexOf</span>(current) === -<span class="hljs-number">1</span>)&#123;<br>       res.<span class="hljs-title function_">push</span>(current)<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>排序后去重</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;1&#x27;</span>];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">array</span>)&#123;<br>  <span class="hljs-keyword">var</span> res = [];<br>  <span class="hljs-keyword">var</span> sortedArray = array.<span class="hljs-title function_">concat</span>().<span class="hljs-title function_">sort</span>();<br>  <span class="hljs-keyword">var</span> seen;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>,len=sortedArray.<span class="hljs-property">length</span>;i &lt; len; i++)&#123;<br>    <span class="hljs-keyword">if</span>(!i||seen!== sortedArray[i])&#123;<br>      res.<span class="hljs-title function_">push</span>(sortedArray[i])<br>    &#125;<br>    seen = sortedArray[i];<br>  &#125;<br>  <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>filter实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1&#x27;</span>];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">array</span>)&#123;<br>  <span class="hljs-keyword">var</span> res = array.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,index,array</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> array.<span class="hljs-title function_">indexOf</span>(item) === index;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>排序去重复</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;1&#x27;</span>];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">array</span>)&#123;<br>  <span class="hljs-keyword">return</span> array.<span class="hljs-title function_">concat</span>().<span class="hljs-title function_">sort</span>().<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item,index,array</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> !index||item!==array[index - <span class="hljs-number">1</span>]<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Object键值对</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> array = [&#123;<span class="hljs-attr">value</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-attr">value</span>: <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-attr">value</span>: <span class="hljs-number">2</span>&#125;];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">array</span>)&#123;<br>  <span class="hljs-keyword">return</span> array.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index, array</span>)=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> item + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(item))<br>        <span class="hljs-keyword">return</span> obj.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-keyword">typeof</span> item + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(item)) ? <span class="hljs-literal">false</span> : (obj[<span class="hljs-keyword">typeof</span> item + <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(item)] = <span class="hljs-literal">true</span>)<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Es6 Set实现</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title function_">unique</span> = (<span class="hljs-params">a</span>) =&gt; [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(a)]<br></code></pre></td></tr></table></figure><h4 id="正则表达式匹配手机号"><a href="#正则表达式匹配手机号" class="headerlink" title="正则表达式匹配手机号"></a>正则表达式匹配手机号</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//港澳手机号</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkTCPhone</span>(<span class="hljs-params">phone</span>)&#123;<br>  <span class="hljs-keyword">if</span>(!(<span class="hljs-regexp">/^(2|3|4|5|6|8|9)\d&#123;7&#125;$/</span>.<span class="hljs-title function_">test</span>(phone)))&#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;手机号码有误，请重填&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">//大陆手机号</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkCNPhone</span>(<span class="hljs-params">phone</span>)&#123;<br>  <span class="hljs-keyword">if</span>(!(<span class="hljs-regexp">/^[1]([3-9])[0-9]&#123;9&#125;$/</span>.<span class="hljs-title function_">test</span>(phone)))&#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;手机号码有误，请重填&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义时间格式"><a href="#自定义时间格式" class="headerlink" title="自定义时间格式"></a>自定义时间格式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Date</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">Format</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fmt</span>) &#123;<br><span class="hljs-keyword">var</span> o = &#123;<br>  <span class="hljs-string">&quot;M+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>, <span class="hljs-comment">// 月份</span><br>  <span class="hljs-string">&quot;d+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getDate</span>(), <span class="hljs-comment">// 日</span><br>  <span class="hljs-string">&quot;h+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getHours</span>(), <span class="hljs-comment">// 小时</span><br>  <span class="hljs-string">&quot;m+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMinutes</span>(), <span class="hljs-comment">// 分</span><br>  <span class="hljs-string">&quot;s+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSeconds</span>(), <span class="hljs-comment">// 秒</span><br>  <span class="hljs-string">&quot;q+&quot;</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>), <span class="hljs-comment">// 季度</span><br>  <span class="hljs-string">&quot;S&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMilliseconds</span>() <span class="hljs-comment">// 毫秒</span><br>&#125;;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/(y+)/</span>.<span class="hljs-title function_">test</span>(fmt))&#123;<br>    fmt = fmt.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>, (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getFullYear</span>() + <span class="hljs-string">&quot;&quot;</span>));<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> o)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;(&quot;</span> + k + <span class="hljs-string">&quot;)&quot;</span>).<span class="hljs-title function_">test</span>(fmt))&#123;<br>      fmt = fmt.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>, (<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) ? (o[k]) : ((<span class="hljs-string">&quot;00&quot;</span> + o[k]).<span class="hljs-title function_">substr</span>((<span class="hljs-string">&quot;&quot;</span> + o[k]).<span class="hljs-property">length</span>)));<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> fmt;<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">1542274800000</span>).<span class="hljs-title class_">Format</span>(<span class="hljs-string">&#x27;yy-MM-dd hh:mm:ss&#x27;</span>); <span class="hljs-comment">//&quot;2018-11-15 17:40:00&quot;</span><br></code></pre></td></tr></table></figure><h4 id="link和-import的区别"><a href="#link和-import的区别" class="headerlink" title="link和@import的区别"></a>link和@import的区别</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. <span class="hljs-built_in">link</span>属于XHTML标签，除了加载css外，还能用于定义RSS，定义rel连接属性等作用，而@import是CSS提供的，只能用于加载CSS；<br>2.页面被加载时，<span class="hljs-built_in">link</span>会同时被加载，而@import引用的CSS会等到页面被加载完再加载；<br>3.@import是CSS2.1提出的，只在IE5以上才能被识别，而<span class="hljs-built_in">link</span>是XHTML标签，无兼容性问题；<br>4.<span class="hljs-built_in">link</span>支持使用js控制DOM去改变样式，而@import不支持<br></code></pre></td></tr></table></figure><h4 id="iframe缺点"><a href="#iframe缺点" class="headerlink" title="iframe缺点"></a>iframe缺点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.iframe会阻塞主页面的onload事件；<br>2.搜索引擎的检索程序无法解读这种页面，不利于SEO；<br>3.iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载，<br>使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好通过JavaScript动态给iframe添加src属性值，这样可以绕开以上两个问题<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue/react 移动端设配</title>
    <link href="/2020/03/26/vue-react-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BE%E9%85%8D/"/>
    <url>/2020/03/26/vue-react-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%AE%BE%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h4 id="px2rem或postcss-px2rem"><a href="#px2rem或postcss-px2rem" class="headerlink" title="px2rem或postcss-px2rem"></a>px2rem或postcss-px2rem</h4><ul><li>在移动端中，为了设配不同的设备，通常使用rem来做适配。</li><li>rem是通过根元素进行适配的，网页中的根元素指的是<html>，我们通过设置<html>的字体大小就可以控制 rem 的大小（1rem &#x3D; 1根元素字体大小）。</html></html></li><li>可见，只要我们根据不同屏幕（使用css媒体查询或js）设定好根元素<html>的字体大小，其他已经使用了rem单位的元素就会自适应显示相应的尺寸。</html></li><li>设计稿一般是按照一种特定设备型号（如iphone6）为基础且以px单位来定义样式，为了让设计稿能够通用在不同的设备型号中，则存在着从px到rem的繁琐计算转化过程，因 此需要更加科学的方式来使用rem单位。</li><li>px2rem或postcss-px2rem的原理：将css中px编译为rem，配合js根据不同手机型号计算出dpr的值，修改<meta>的viewport值和置<html>的font-size</html></li></ul><h4 id="recat项目配置postcss-px2rem"><a href="#recat项目配置postcss-px2rem" class="headerlink" title="recat项目配置postcss-px2rem"></a>recat项目配置postcss-px2rem</h4><ul><li>使用yarn 安装项目所需依赖后，安装 lib-flexible 、 postcss-px2rem 和 postcss-loader<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add postcss-px2rem lib-flexible <br>yarn add postcss-loader --dev<br></code></pre></td></tr></table></figure></li><li>在入口页面 index.html 中设置<meta>标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></li><li>然后在项目入口文件 index.js 中引入 lib-flexible<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">import <span class="hljs-string">&#x27;lib-flexible&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li>暴露webpack配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn eject<br></code></pre></td></tr></table></figure></li><li>在项目config目录下的 webpack.config.js 中引入 postcss-px2rem<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">const px2rem = require(<span class="hljs-string">&#x27;postcss-px2rem&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li>在 webpack.config.js 的 postcss-loader loader里面添加 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>        loader: require.resolve(<span class="hljs-string">&#x27;postcss-loader&#x27;</span>),<br>        options: &#123;<br>          /* 省略代码... */<br>          plugins: () =&gt; [<br>            require(<span class="hljs-string">&#x27;postcss-flexbugs-fixes&#x27;</span>),<br>            require(<span class="hljs-string">&#x27;postcss-preset-env&#x27;</span>)(&#123;<br>              autoprefixer: &#123;<br>                flexbox: <span class="hljs-string">&#x27;no-2009&#x27;</span>,<br>              &#125;,<br>              stage: 3,<br>            &#125;),<br>            px2rem(&#123;remUnit: 37.5&#125;), // 添加的内容<br>            /* 省略代码... */<br>          ],<br>          sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,<br>        &#125;,<br>      &#125;,<br></code></pre></td></tr></table></figure></li><li>使用 yarn start 重启项目，完成配置</li></ul><h4 id="vue项目配置px2rem"><a href="#vue项目配置px2rem" class="headerlink" title="vue项目配置px2rem"></a>vue项目配置px2rem</h4><ul><li>使用yarn 安装项目所需依赖后，安装 lib-flexible 、 postcss-px2rem 和 postcss-loader<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add postcss-pxtorem lib-flexible <br>yarn add amfe-flexible --dev<br>yarn add autoprefixer --dev<br></code></pre></td></tr></table></figure></li><li>在入口页面 index.html 中设置<meta>标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0,maximum-scale=1.0, user-scalable=no&quot;</span>/&gt;<br></code></pre></td></tr></table></figure></li><li>然后在项目入口文件 index.js 中引入 lib-flexible<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">import <span class="hljs-string">&#x27;amfe-flexible&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li>在vue.config.js中 添加以下代码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">const autoprefixer = require(<span class="hljs-string">&#x27;autoprefixer&#x27;</span>)<br>const pxtorem = require(<span class="hljs-string">&#x27;postcss-pxtorem&#x27;</span>)<br>const path = require(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br>module.exports = &#123;<br>  css: &#123;<br>    loaderOptions: &#123;<br>      postcss: &#123;<br>        plugins: [<br>          autoprefixer(),<br>          pxtorem(&#123;<br>            rootValue: 37.5,<br>            propList: [<span class="hljs-string">&#x27;*&#x27;</span>]<br>            // selectorBlackList: [<span class="hljs-string">&#x27;van&#x27;</span>]<br>          &#125;)<br>        ]<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="适用情况-amp-不适用情况"><a href="#适用情况-amp-不适用情况" class="headerlink" title="适用情况 &amp; 不适用情况"></a>适用情况 &amp; 不适用情况</h4></li><li>以上实现转换适用于<br>(1)vue 组件中编写的<style></style>下的css。<br>(2)从 react 项目的 index.js 或者 vue 项目的 main.js 中通过import ‘..&#x2F;..&#x2F;static&#x2F;css&#x2F;reset.css’引入css。<br>(3)在 vue 组件的<script type="”text/ecmascript-6″">import ‘../../static/css/reset.css'</script>中引入css。</li><li>另外的情况不适用<br>(1)在 vue 组件的<style></style>中通过@import “..&#x2F;..&#x2F;static&#x2F;css&#x2F;reset.css (可考虑上面（2）、（3）的形式引入)。<br>(2)外部样式：<link rel="”stylesheet”" href="”static/css/reset.css”">。<br>(3)元素内部样式：style&#x3D;”height: 417px; width: 550px;”。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>react-hook 小记</title>
    <link href="/2020/03/26/react-hook-%E5%B0%8F%E8%AE%B0/"/>
    <url>/2020/03/26/react-hook-%E5%B0%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="模拟React的生命周期"><a href="#模拟React的生命周期" class="headerlink" title="模拟React的生命周期"></a>模拟React的生命周期</h4><ul><li>constructor：函数组件不需要构造函数。你可以通过调用 useState 来初始化 state。</li><li>componentDidMount：通过 useEffect 传入第二个参数为[]实现。</li><li>componentDidUpdate：通过 useEffect 传入第二个参数为空或者为值变动的数组。</li><li>componentWillUnmount：主要用来清除副作用。通过 useEffect 函数 return 一个函数来模拟。</li><li>shouldComponentUpdate：你可以用 React.memo 包裹一个组件来对它的 props 进行浅比较。来模拟是否更新组件。</li></ul><h4 id="React-Hook进行数据请求"><a href="#React-Hook进行数据请求" class="headerlink" title="React Hook进行数据请求"></a>React Hook进行数据请求</h4><p>Class组件 我们通常在<font color="red"> componentDidMount </font>生命周期发起请求，但是使用Hook时，发送请求使用的是<font color="red"> useEffect </font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">// javascript<br>import React,&#123; useState,useEffect &#125; from <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-built_in">export</span> default <span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">App</span></span>() &#123;<br>  const [data, setData] = useState(null);<br>  useEffect(() =&gt; &#123;<br>    const fetchData = async () =&gt; &#123;<br>      const result = await axios(<br>        <span class="hljs-string">&quot;https://test.com/example/queryList&quot;</span><br>      );<br>      setData(result.data); // 赋值获取后的数据<br>    &#125;;<br>    fetchData();<br>  &#125;);<br>  <span class="hljs-built_in">return</span> (<br>    &lt;div&gt;<br>      &#123;data ? (<br>        &lt;ul&gt;<br>          &lt;li&gt;&#123;`<span class="hljs-built_in">id</span>：<span class="hljs-variable">$&#123;data.id&#125;</span>`&#125;&lt;/li&gt;<br>          &lt;li&gt;&#123;`title：<span class="hljs-variable">$&#123;data.title&#125;</span>`&#125;&lt;/li&gt;<br>        &lt;/ul&gt;<br>      ) : null&#125;<br>    &lt;/div&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 <font color="red"> useEffect </font> 第二个参数不传入，导致每次data更新都会执行，这样就陷入死循环循环了。需要改造下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">// javascript<br>  ···<br>  useEffect(()=&gt;&#123;<br>    ···<br>  &#125;,[])<br>  ···<br></code></pre></td></tr></table></figure><p>我们一个程序会有多个组件，很多组件都会有请求接口的逻辑, 为了统一处理，一般我们会使用<font color="red"> 自定义Hook </font>抽离出请求，作为一个公共的Hook</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">// javascript<br>// config =&gt;  期望格式<br>// &#123;<br>//     method: <span class="hljs-string">&#x27;post&#x27;</span>,<br>//     url: <span class="hljs-string">&#x27;/user/12345&#x27;</span>,<br>//     data: &#123;<br>//         firstName: <span class="hljs-string">&#x27;Fred&#x27;</span>,<br>//         lastName: <span class="hljs-string">&#x27;Flintstone&#x27;</span><br>//     &#125;<br>// &#125;<br><span class="hljs-keyword">function</span> useFetchHook(config)&#123;<br>    const [data,setData] = useState(null);<br>    useEffect(() =&gt; &#123;<br>        const fetchData = async () =&gt; &#123;<br>            const result = await axios(config);<br>            setData(result.data)<br>        &#125;;<br>        fetchData();<br>    &#125;,[]);<br>    <span class="hljs-built_in">return</span> &#123; data &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>引用<font color="red"> useFetchHook </font>就可以直接调用</p><p>（优化）传入监听值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">// javascript<br>// watch =&gt; 期望格式是 []<br><span class="hljs-keyword">function</span> useFetchHook(config,watch)&#123;<br>    const [data,setData] = useState(null);<br>    useEffect(() =&gt; &#123;<br>        ...<br>    &#125;,<br>    watch?[...watch]:[] // 判断是否有需要监测的属性<br>    );<br>    <span class="hljs-built_in">return</span> &#123; data &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（优化）添加请求状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">// javascript<br><span class="hljs-keyword">function</span> useFetchHook(config,watch)&#123;<br>    // status 标识当前接口请求状态 0：请求中 1：请求成功 2：请求失败<br>    const [status,setStatus] = useState(0);<br>    const [data,setData] = useState(null);<br>    useEffect(() =&gt; &#123;<br>        try&#123;<br>            ...<br>            setStatus(1) // 成功<br>        &#125;catch(err)&#123;<br>            setStatus(2) // 失败<br>        &#125;<br>    &#125;,<br>    watch?[...watch]:[] // 判断是否有需要监测的属性<br>    );<br>    <span class="hljs-built_in">return</span> &#123; data, status &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用的如下，如需优化loading toast… 可以动态添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">// javascript<br><span class="hljs-keyword">function</span> useFetchHook(config, watch) &#123;<br>    const [data, setData] = useState(null);<br>    const [status, setStatus] = useState(0);<br>    useEffect(<br>        () =&gt; &#123;<br>        const fetchData = async () =&gt; &#123;<br>            try &#123;<br>            const result = await axios(config);<br>            setData(result.data);<br>            setStatus(1);<br>            &#125; catch (err) &#123;<br>            setStatus(2);<br>            &#125;<br>        &#125;;<br><br>        fetchData();<br>        &#125;,<br>        watch ? [watch] : []<br>    );<br>    <span class="hljs-built_in">return</span> &#123; data, status &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常用提高性能"><a href="#常用提高性能" class="headerlink" title="常用提高性能"></a>常用提高性能</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">// javascript<br>class App extends Component&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span></span>() &#123;<br>        <span class="hljs-built_in">return</span> <br>        &lt;div&gt;<br>            &lt;Button onClick=&#123; () =&gt; &#123; console.log(<span class="hljs-string">&#x27;do something&#x27;</span>); &#125;&#125;  /&gt;<br>        &lt;/div&gt;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面App组件如果props发生改变时，就会重新渲染组件。如果这个修改并不涉及到Button组件，但是由于每次render的时候都会产生新的onClick函数，react就认为其发生了改变，从而产生了不必要的渲染而引起性能浪费</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">// javascript<br>class App extends Component&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span></span>()&#123;<br>        super();<br>        this.buttonClick = this.buttonClick.<span class="hljs-built_in">bind</span>(this);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span></span>() &#123;<br>        <span class="hljs-built_in">return</span> <br>        &lt;div&gt;<br>            &lt;Button onClick=&#123; this.buttonClick &#125;  /&gt;<br>        &lt;/div&gt;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在类组件中我们可以直接将函数绑定到this对象上，<br>但是在Hook上可以使用<font color="red"> useCallback </font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">// javascript<br><span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">App</span></span>()&#123;<br>    const buttonClick = useCallback(<br>        () =&gt; &#123; console.log(<span class="hljs-string">&#x27;do something&#x27;</span>),[]<br>    )<br>    <span class="hljs-built_in">return</span>(<br>        &lt;div&gt;<br>            &lt;Button onClick=&#123; buttonClick &#125;  /&gt;<br>        &lt;/div&gt;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue小知识</title>
    <link href="/2020/03/25/vue%E7%9B%B8%E5%85%B3%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <url>/2020/03/25/vue%E7%9B%B8%E5%85%B3%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h5 id="不要在同个元素上同时使用-v-if-和-v-if-指令"><a href="#不要在同个元素上同时使用-v-if-和-v-if-指令" class="headerlink" title="不要在同个元素上同时使用 v-if 和 v-if 指令"></a>不要在同个元素上同时使用 <font color="red">v-if</font> 和 <font color="red">v-if</font> 指令</h5><p>为了过滤数组中的元素，我们很容易将v-if与v-for在同个元素同时使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">// 不好的做法<br>&lt;div v-for=<span class="hljs-string">&#x27;product in products&#x27;</span> v-if=<span class="hljs-string">&#x27;product.price &lt; 500&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>问题是在 Vue 优先使用v-for指令，而不是v-if指令。它循环遍历每个元素，然后检查v-if条件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">this.products.map(<span class="hljs-keyword">function</span> (product) &#123;<br>  <span class="hljs-keyword">if</span> (product.price &lt; 500) &#123;<br>    <span class="hljs-built_in">return</span> product<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>这意味着，即使我们只想渲染列表中的几个元素，也必须遍历整个数组。</p><p>这对我们来当然没有任何好处。</p><p>一个更聪明的解决方案是遍历一个计算属性，可以把上面的例子重构成下面这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;div v-for=<span class="hljs-string">&#x27;product in cheapProducts&#x27;</span>&gt;<br> <br>computed: &#123;<br>  cheapProducts: () =&gt; &#123;<br>    <span class="hljs-built_in">return</span> this.products.filter(<span class="hljs-keyword">function</span> (product) &#123;<br>      <span class="hljs-built_in">return</span> product.price &lt; 100<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="这么做有几个好处："><a href="#这么做有几个好处：" class="headerlink" title="这么做有几个好处："></a>这么做有几个好处：</h4><ul><li><p>渲染效率更高，因为我们不会遍历所有元素</p></li><li><p>仅当依赖项更改时，才会重使用过滤后的列表</p></li><li><p>这写法有助于将组件逻辑从模板中分离出来，使组件更具可读性</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2019/05/28/hello-world/"/>
    <url>/2019/05/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>javascript 事件托管</title>
    <link href="/2019/05/28/javascript%20%E4%BA%8B%E4%BB%B6%E6%89%98%E7%AE%A1/"/>
    <url>/2019/05/28/javascript%20%E4%BA%8B%E4%BB%B6%E6%89%98%E7%AE%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>事件委托是指利用<strong>事件冒泡</strong>，指定一个事件处理程序，管理某一类型的事件</p><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><p>在 document.addEventListener 的时候我们可以设置事件模型：<strong>事件冒泡</strong>、<strong>事件捕获</strong></p><p><img src="http://jbcdn2.b0.upaiyun.com/2017/05/a6f74035ad4fd5dae82fdb4ed2761287.png" alt="事件模型"></p><h4 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h4><ul><li>捕获阶段：在事件冒泡的模型中，捕获阶段不会相应任何事件；</li><li>目标阶段：事件相应到触发事件的最底层元素上</li><li>冒泡阶段：事件的触发相应会从最底层目标一层层地向外到最外层（根节点），事件代理就是利用事件冒泡的机制把里层所需要相应的事件绑定到外层</li></ul><h4 id="常见例子"><a href="#常见例子" class="headerlink" title="常见例子"></a>常见例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;menu&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">//兼容IE</span><br>    e = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>    <span class="hljs-keyword">var</span> target = e.<span class="hljs-property">target</span> || e.<span class="hljs-property">srcElement</span>;<br><br>    <span class="hljs-keyword">if</span> (target.<span class="hljs-property">nodeName</span> !== <span class="hljs-string">&#x27;A&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    ... <span class="hljs-comment">// 需要对a标签所做的处理</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-comment">//兼容IE</span><br>    e = e || <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>    <span class="hljs-keyword">var</span> target = e.<span class="hljs-property">target</span> || e.<span class="hljs-property">srcElement</span>,<br>        targetNodeName = target.<span class="hljs-property">nodeName</span>;<br><br>    <span class="hljs-keyword">if</span> (targetNodeName == <span class="hljs-string">&#x27;A&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 一些处理...</span><br>    &#125;<span class="hljs-title function_">elseif</span>(<span class="hljs-params">targetNodeName == <span class="hljs-string">&#x27;li&#x27;</span></span>)&#123;<br>        <span class="hljs-comment">// 一些处理...</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">// 一些处理...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>事件委托,时间托管</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue生命周期</title>
    <link href="/2019/05/28/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2019/05/28/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="vue生命周期"></p><h4 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h4><table><thead><tr><th>状态</th><th>结果</th></tr></thead><tbody><tr><td>new vue</td><td>创建vue实例</td></tr><tr><td>init events &amp; lifecycle</td><td>开始初始化</td></tr><tr><td>beforeCreate</td><td>组件刚被创建，组建属性计算之前，如data属性等</td></tr><tr><td>init injections &amp; reactivity</td><td>通过依赖注入导入依赖项</td></tr><tr><td>created</td><td>组件实例创建完成，属性已绑定，此时DOM还未生成</td></tr><tr><td>el属性</td><td>检查vue配置，即new Vue{}里面的el项是否存在，有就继续检查template项。没有则等到手动绑定调用vm.$mount()</td></tr><tr><td>template</td><td>检查配置中的template项，如果没有template进行填充被绑定区域，则被绑定区域的el对象的outerHTML（即整个#app DOM对象，包括<div id="”app”">和</div>标签）都作为被填充对象替换掉填充区域</td></tr><tr><td>beforeMount</td><td>模板编译、挂载之前</td></tr><tr><td>create vm.$el and replace “el” with it</td><td>编译，并替换了被绑定元素</td></tr><tr><td>mounted</td><td>编译、挂载</td></tr><tr><td>Before update</td><td>组件更新之前</td></tr><tr><td>updated</td><td>组件更新之后</td></tr><tr><td>destroy</td><td>当vm.$destroy()被调用，开始拆卸组件和监听器，生命周期终结</td></tr></tbody></table><p>[表格标题]</p><h4 id="生命周期的历程"><a href="#生命周期的历程" class="headerlink" title="生命周期的历程"></a>生命周期的历程</h4><ul><li>new Vue： 创建vue实例</li><li>beforecreated： 监测数据，初始化事件</li><li>created：绑定数据和事件，此时可以访问修改data，访问methods</li><li>beforeMount： 模板编译，生成 dom 但未挂载</li><li>mounted： 编译，挂载，实例数据在dom上渲染</li><li>beforeUpdate： 数据更新，但不进行DOM重新渲染</li><li>updated： 更新数据，进行dom渲染</li><li>beforeDestory： 实例销毁</li><li>destroyed： 实例销毁，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</li></ul><h4 id="什么时候需要用到Vue-nextTick"><a href="#什么时候需要用到Vue-nextTick" class="headerlink" title="什么时候需要用到Vue.nextTick()"></a>什么时候需要用到Vue.nextTick()</h4><ol><li>在 Vue 生命周期的 created() 钩子函数进行的 DOM 操作一定要放在 Vue.nextTick() 的回调函数中。原因是什么呢，原因是<br>在 created() 钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作<br>的 js 代码放进 Vue.nextTick() 的回调函数中。与之对应的就是 mounted 钩子函数，因为该钩子函数执行时所有的 DOM 挂载和<br>渲染都已完成，此时在该钩子函数中进行任何DOM操作都不会有问题 。</li><li>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的 DOM 结构的时候，这个操作都应该放<br>进 Vue.nextTick() 的回调函数中。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>vue,生命周期</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
